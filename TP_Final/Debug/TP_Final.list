
TP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f1c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003294  08003294  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08003294  08003294  00013294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800329c  0800329c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032a0  080032a0  000132a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080032a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000158  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d43c  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020aa  00000000  00000000  0002d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  0002f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000740  00000000  00000000  0002fd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000488c  00000000  00000000  000304d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cdad  00000000  00000000  00034d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2470  00000000  00000000  00041b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00123f81  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021e0  00000000  00000000  00123fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080030b4 	.word	0x080030b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	080030b4 	.word	0x080030b4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <controllerGateInit>:

/* Private variables ---------------------------------------------------------*/
static controllerGate_t currentStatus;

bool_t controllerGateInit(sensor_t * sensors)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	bool_t validInit = false;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]
	if((false == sensors->readerRFID) &&
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d110      	bne.n	80005ce <controllerGateInit+0x36>
		(false == sensors->loopDetector) &&
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	785b      	ldrb	r3, [r3, #1]
	if((false == sensors->readerRFID) &&
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d10c      	bne.n	80005ce <controllerGateInit+0x36>
		(false == sensors->limitSwitchTop) &&
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	789b      	ldrb	r3, [r3, #2]
		(false == sensors->loopDetector) &&
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d108      	bne.n	80005ce <controllerGateInit+0x36>
		(true == sensors->limitSwitchBottom))
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	78db      	ldrb	r3, [r3, #3]
		(false == sensors->limitSwitchTop) &&
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d104      	bne.n	80005ce <controllerGateInit+0x36>
	{
		currentStatus = WAIT;
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <controllerGateInit+0x44>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
		validInit = true;
 80005ca:	2301      	movs	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
	}

	return validInit;
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	20000098 	.word	0x20000098

080005e0 <controllerGateUpdate>:

uint8_t controllerGateUpdate(sensor_t * sensors)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	uint8_t outputState;
	switch(currentStatus){
 80005e8:	4b3f      	ldr	r3, [pc, #252]	; (80006e8 <controllerGateUpdate+0x108>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d86f      	bhi.n	80006d0 <controllerGateUpdate+0xf0>
 80005f0:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <controllerGateUpdate+0x18>)
 80005f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f6:	bf00      	nop
 80005f8:	08000609 	.word	0x08000609
 80005fc:	0800063b 	.word	0x0800063b
 8000600:	08000667 	.word	0x08000667
 8000604:	0800069f 	.word	0x0800069f
		case WAIT:
			if(sensors->readerRFID)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d008      	beq.n	8000622 <controllerGateUpdate+0x42>
			{
				currentStatus = OPENNING;
 8000610:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <controllerGateUpdate+0x108>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
				outputState = MOTOR_UP;
 8000616:	2301      	movs	r3, #1
 8000618:	73fb      	strb	r3, [r7, #15]

				/* Simulation */
				sensors->limitSwitchBottom = false;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	70da      	strb	r2, [r3, #3]
 8000620:	e004      	b.n	800062c <controllerGateUpdate+0x4c>
			}
			else
			{
				outputState = MOTOR_STOP;
 8000622:	2302      	movs	r3, #2
 8000624:	73fb      	strb	r3, [r7, #15]

				/* Simulation */
				sensors->limitSwitchBottom = true;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2201      	movs	r2, #1
 800062a:	70da      	strb	r2, [r3, #3]
			}

			/* Simulation */
			sensors->loopDetector = false;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2200      	movs	r2, #0
 8000630:	705a      	strb	r2, [r3, #1]
			sensors->limitSwitchTop = false;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	709a      	strb	r2, [r3, #2]

			break;
 8000638:	e050      	b.n	80006dc <controllerGateUpdate+0xfc>
		case OPENNING:
			if(sensors->limitSwitchTop)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	789b      	ldrb	r3, [r3, #2]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d005      	beq.n	800064e <controllerGateUpdate+0x6e>
			{
				currentStatus = OPEN;
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <controllerGateUpdate+0x108>)
 8000644:	2202      	movs	r2, #2
 8000646:	701a      	strb	r2, [r3, #0]
				outputState = MOTOR_STOP;
 8000648:	2302      	movs	r3, #2
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e001      	b.n	8000652 <controllerGateUpdate+0x72>
			}
			else
			{
				outputState = MOTOR_UP;
 800064e:	2301      	movs	r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
			}

			/* Simulation */
			sensors->readerRFID = true;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2201      	movs	r2, #1
 8000656:	701a      	strb	r2, [r3, #0]
			sensors->loopDetector = false;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2200      	movs	r2, #0
 800065c:	705a      	strb	r2, [r3, #1]
			sensors->limitSwitchBottom = false;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2200      	movs	r2, #0
 8000662:	70da      	strb	r2, [r3, #3]

			break;
 8000664:	e03a      	b.n	80006dc <controllerGateUpdate+0xfc>
		case OPEN:
			if(sensors->loopDetector)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d00b      	beq.n	8000686 <controllerGateUpdate+0xa6>
			{
				currentStatus = CLOSING;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <controllerGateUpdate+0x108>)
 8000670:	2203      	movs	r2, #3
 8000672:	701a      	strb	r2, [r3, #0]
				outputState = MOTOR_DOWN;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]
				sensors->readerRFID = false;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
				sensors->limitSwitchTop = false;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2200      	movs	r2, #0
 8000682:	709a      	strb	r2, [r3, #2]
 8000684:	e007      	b.n	8000696 <controllerGateUpdate+0xb6>
			}
			else
			{
				outputState = MOTOR_STOP;
 8000686:	2302      	movs	r3, #2
 8000688:	73fb      	strb	r3, [r7, #15]
				sensors->readerRFID = true;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
				sensors->limitSwitchTop = true;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2201      	movs	r2, #1
 8000694:	709a      	strb	r2, [r3, #2]
			}

			/* Simulation */
			sensors->limitSwitchBottom = false;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	70da      	strb	r2, [r3, #3]

			break;
 800069c:	e01e      	b.n	80006dc <controllerGateUpdate+0xfc>
		case CLOSING:
			if(sensors->limitSwitchBottom)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	78db      	ldrb	r3, [r3, #3]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d008      	beq.n	80006b8 <controllerGateUpdate+0xd8>
			{
				currentStatus = WAIT;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <controllerGateUpdate+0x108>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
				outputState = MOTOR_STOP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	73fb      	strb	r3, [r7, #15]

				/* Simulation */
				sensors->loopDetector = false;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	705a      	strb	r2, [r3, #1]
 80006b6:	e004      	b.n	80006c2 <controllerGateUpdate+0xe2>
			}
			else
			{
				outputState = MOTOR_DOWN;
 80006b8:	2300      	movs	r3, #0
 80006ba:	73fb      	strb	r3, [r7, #15]

				/* Simulation */
				sensors->loopDetector = true;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2201      	movs	r2, #1
 80006c0:	705a      	strb	r2, [r3, #1]
			}

			/* Simulation */
			sensors->readerRFID = false;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
			sensors->limitSwitchTop = false;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	709a      	strb	r2, [r3, #2]

			break;
 80006ce:	e005      	b.n	80006dc <controllerGateUpdate+0xfc>
		default:
			controllerGateInit(sensors);
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ff61 	bl	8000598 <controllerGateInit>
			outputState = MOTOR_STOP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	73fb      	strb	r3, [r7, #15]
			break;
 80006da:	bf00      	nop
	}
	return outputState;
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000098 	.word	0x20000098

080006ec <controllerGetState>:

void controllerGetState(char * state)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	if(state != NULL)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d02c      	beq.n	8000754 <controllerGetState+0x68>
	{
		switch(currentStatus)
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <controllerGetState+0x7c>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d82a      	bhi.n	8000758 <controllerGetState+0x6c>
 8000702:	a201      	add	r2, pc, #4	; (adr r2, 8000708 <controllerGetState+0x1c>)
 8000704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000708:	08000719 	.word	0x08000719
 800070c:	08000727 	.word	0x08000727
 8000710:	08000737 	.word	0x08000737
 8000714:	08000745 	.word	0x08000745
		{
			case 0:
				strcpy(state,"Wait");
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a14      	ldr	r2, [pc, #80]	; (800076c <controllerGetState+0x80>)
 800071c:	6810      	ldr	r0, [r2, #0]
 800071e:	6018      	str	r0, [r3, #0]
 8000720:	7912      	ldrb	r2, [r2, #4]
 8000722:	711a      	strb	r2, [r3, #4]
				break;
 8000724:	e019      	b.n	800075a <controllerGetState+0x6e>
			case 1:
				strcpy(state,"Opening");
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4911      	ldr	r1, [pc, #68]	; (8000770 <controllerGetState+0x84>)
 800072a:	461a      	mov	r2, r3
 800072c:	460b      	mov	r3, r1
 800072e:	cb03      	ldmia	r3!, {r0, r1}
 8000730:	6010      	str	r0, [r2, #0]
 8000732:	6051      	str	r1, [r2, #4]
				break;
 8000734:	e011      	b.n	800075a <controllerGetState+0x6e>
			case 2:
				strcpy(state,"Open");
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <controllerGetState+0x88>)
 800073a:	6810      	ldr	r0, [r2, #0]
 800073c:	6018      	str	r0, [r3, #0]
 800073e:	7912      	ldrb	r2, [r2, #4]
 8000740:	711a      	strb	r2, [r3, #4]
				break;
 8000742:	e00a      	b.n	800075a <controllerGetState+0x6e>
			case 3:
				strcpy(state,"Closing");
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	490c      	ldr	r1, [pc, #48]	; (8000778 <controllerGetState+0x8c>)
 8000748:	461a      	mov	r2, r3
 800074a:	460b      	mov	r3, r1
 800074c:	cb03      	ldmia	r3!, {r0, r1}
 800074e:	6010      	str	r0, [r2, #0]
 8000750:	6051      	str	r1, [r2, #4]
				break;
 8000752:	e002      	b.n	800075a <controllerGetState+0x6e>
			default:
				break;
		}
	}
 8000754:	bf00      	nop
 8000756:	e000      	b.n	800075a <controllerGetState+0x6e>
				break;
 8000758:	bf00      	nop
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000098 	.word	0x20000098
 800076c:	080030cc 	.word	0x080030cc
 8000770:	080030d4 	.word	0x080030d4
 8000774:	080030dc 	.word	0x080030dc
 8000778:	080030e4 	.word	0x080030e4

0800077c <sensorInit>:
/* Private variables ---------------------------------------------------------*/
static sensor_t sensorState;

/* Implementation of public functions ---------------------------------------------------------*/
bool_t sensorInit(sensor_t * sensorInfo)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	bool_t initSensor = false;
 8000784:	2300      	movs	r3, #0
 8000786:	73fb      	strb	r3, [r7, #15]
	if(sensorInfo != NULL)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d011      	beq.n	80007b2 <sensorInit+0x36>
	{
		sensorInfo->readerRFID = notDetect;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
		sensorInfo->loopDetector = notDetect;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	705a      	strb	r2, [r3, #1]
		sensorInfo->limitSwitchTop = notDetect;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2200      	movs	r2, #0
 800079e:	709a      	strb	r2, [r3, #2]
		sensorInfo->limitSwitchBottom = detect;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2201      	movs	r2, #1
 80007a4:	70da      	strb	r2, [r3, #3]

		sensorState = *sensorInfo;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <sensorInit+0x44>)
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	6810      	ldr	r0, [r2, #0]
 80007ac:	6018      	str	r0, [r3, #0]
		initSensor = true;
 80007ae:	2301      	movs	r3, #1
 80007b0:	73fb      	strb	r3, [r7, #15]
	}
	return initSensor;
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	2000009c 	.word	0x2000009c

080007c4 <sensorUpdateState>:

void sensorUpdateState(uint8_t  command, sensor_t * sensorInfo)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	71fb      	strb	r3, [r7, #7]
	switch(command){
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	3b41      	subs	r3, #65	; 0x41
 80007d4:	2b23      	cmp	r3, #35	; 0x23
 80007d6:	d86b      	bhi.n	80008b0 <sensorUpdateState+0xec>
 80007d8:	a201      	add	r2, pc, #4	; (adr r2, 80007e0 <sensorUpdateState+0x1c>)
 80007da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007de:	bf00      	nop
 80007e0:	08000879 	.word	0x08000879
 80007e4:	08000889 	.word	0x08000889
 80007e8:	08000899 	.word	0x08000899
 80007ec:	080008a9 	.word	0x080008a9
 80007f0:	080008b1 	.word	0x080008b1
 80007f4:	080008b1 	.word	0x080008b1
 80007f8:	080008b1 	.word	0x080008b1
 80007fc:	080008b1 	.word	0x080008b1
 8000800:	080008b1 	.word	0x080008b1
 8000804:	080008b1 	.word	0x080008b1
 8000808:	080008b1 	.word	0x080008b1
 800080c:	080008b1 	.word	0x080008b1
 8000810:	080008b1 	.word	0x080008b1
 8000814:	080008b1 	.word	0x080008b1
 8000818:	080008b1 	.word	0x080008b1
 800081c:	080008b1 	.word	0x080008b1
 8000820:	080008b1 	.word	0x080008b1
 8000824:	080008b1 	.word	0x080008b1
 8000828:	080008b1 	.word	0x080008b1
 800082c:	080008b1 	.word	0x080008b1
 8000830:	080008b1 	.word	0x080008b1
 8000834:	080008b1 	.word	0x080008b1
 8000838:	080008b1 	.word	0x080008b1
 800083c:	080008b1 	.word	0x080008b1
 8000840:	080008b1 	.word	0x080008b1
 8000844:	080008b1 	.word	0x080008b1
 8000848:	080008b1 	.word	0x080008b1
 800084c:	080008b1 	.word	0x080008b1
 8000850:	080008b1 	.word	0x080008b1
 8000854:	080008b1 	.word	0x080008b1
 8000858:	080008b1 	.word	0x080008b1
 800085c:	080008b1 	.word	0x080008b1
 8000860:	08000871 	.word	0x08000871
 8000864:	08000881 	.word	0x08000881
 8000868:	08000891 	.word	0x08000891
 800086c:	080008a1 	.word	0x080008a1
		case 'a':
			sensorInfo->readerRFID = detect;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
			break;
 8000876:	e01c      	b.n	80008b2 <sensorUpdateState+0xee>
		case 'A':
			sensorInfo->readerRFID = notDetect;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
			break;
 800087e:	e018      	b.n	80008b2 <sensorUpdateState+0xee>
		case 'b':
			sensorInfo->limitSwitchTop = detect;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	2201      	movs	r2, #1
 8000884:	709a      	strb	r2, [r3, #2]
			break;
 8000886:	e014      	b.n	80008b2 <sensorUpdateState+0xee>
		case 'B':
			sensorInfo->limitSwitchTop = notDetect;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2200      	movs	r2, #0
 800088c:	709a      	strb	r2, [r3, #2]
			break;
 800088e:	e010      	b.n	80008b2 <sensorUpdateState+0xee>
		case 'c':
			sensorInfo->loopDetector = detect;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	2201      	movs	r2, #1
 8000894:	705a      	strb	r2, [r3, #1]
			break;
 8000896:	e00c      	b.n	80008b2 <sensorUpdateState+0xee>
		case 'C':
			sensorInfo->loopDetector = notDetect;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	2200      	movs	r2, #0
 800089c:	705a      	strb	r2, [r3, #1]
			break;
 800089e:	e008      	b.n	80008b2 <sensorUpdateState+0xee>
		case 'd':
			sensorInfo->limitSwitchBottom =  detect;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	2201      	movs	r2, #1
 80008a4:	70da      	strb	r2, [r3, #3]
			break;
 80008a6:	e004      	b.n	80008b2 <sensorUpdateState+0xee>
		case 'D':
			sensorInfo->limitSwitchBottom = notDetect;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	2200      	movs	r2, #0
 80008ac:	70da      	strb	r2, [r3, #3]
			break;
 80008ae:	e000      	b.n	80008b2 <sensorUpdateState+0xee>
		default:
			break;
 80008b0:	bf00      	nop
	}
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop

080008c0 <uartInit>:
static void uart_wordLengthCfg(char *);
static void uart_stopBitCfg(char *);
static void uart_parityCfg(char *);

bool_t uartInit()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
	bool_t status = true;
 80008c6:	2301      	movs	r3, #1
 80008c8:	71fb      	strb	r3, [r7, #7]
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
		- Stop Bit    = One Stop bit
		- Parity      = ODD parity
		- BaudRate    = 9600 baud
		- Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance        = USART3;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <uartInit+0x5c>)
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <uartInit+0x60>)
 80008ce:	601a      	str	r2, [r3, #0]

	UartHandle.Init.BaudRate   = 9600;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <uartInit+0x5c>)
 80008d2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008d6:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <uartInit+0x5c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <uartInit+0x5c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80008e4:	4b0d      	ldr	r3, [pc, #52]	; (800091c <uartInit+0x5c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <uartInit+0x5c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <uartInit+0x5c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <uartInit+0x5c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80008fc:	4807      	ldr	r0, [pc, #28]	; (800091c <uartInit+0x5c>)
 80008fe:	f001 fa4f 	bl	8001da0 <HAL_UART_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <uartInit+0x4c>
	{
		status = false;
 8000908:	2300      	movs	r3, #0
 800090a:	71fb      	strb	r3, [r7, #7]
	}

	uartPrintfConfiguration();
 800090c:	f000 f830 	bl	8000970 <uartPrintfConfiguration>

	return status;
 8000910:	79fb      	ldrb	r3, [r7, #7]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000017c 	.word	0x2000017c
 8000920:	40004800 	.word	0x40004800

08000924 <uartSendString>:

void uartSendString(uint8_t *pString, uint16_t size)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	807b      	strh	r3, [r7, #2]
	if(pString != NULL){
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d006      	beq.n	8000944 <uartSendString+0x20>
		HAL_UART_Transmit(&UartHandle, pString,size,0xFFFF);
 8000936:	887a      	ldrh	r2, [r7, #2]
 8000938:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <uartSendString+0x28>)
 8000940:	f001 fa7b 	bl	8001e3a <HAL_UART_Transmit>
	}
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000017c 	.word	0x2000017c

08000950 <UartReceivedChar>:

void UartReceivedChar(uint8_t * data)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive(&UartHandle,data,1,0);
 8000958:	2300      	movs	r3, #0
 800095a:	2201      	movs	r2, #1
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <UartReceivedChar+0x1c>)
 8000960:	f001 fafd 	bl	8001f5e <HAL_UART_Receive>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000017c 	.word	0x2000017c

08000970 <uartPrintfConfiguration>:

static void uartPrintfConfiguration()
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b0f0      	sub	sp, #448	; 0x1c0
 8000974:	af02      	add	r7, sp, #8
	const char text[] = "Configuration Uart \n"
 8000976:	4a1e      	ldr	r2, [pc, #120]	; (80009f0 <uartPrintfConfiguration+0x80>)
 8000978:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800097c:	4611      	mov	r1, r2
 800097e:	2257      	movs	r2, #87	; 0x57
 8000980:	4618      	mov	r0, r3
 8000982:	f001 ff69 	bl	8002858 <memcpy>

	uint32_t p1;
	char p2[30], p3[30], p4[30];
	char buffer[250];

	p1 = UartHandle.Init.BaudRate;
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <uartPrintfConfiguration+0x84>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	uart_wordLengthCfg(p2);
 800098e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f830 	bl	80009f8 <uart_wordLengthCfg>
	uart_stopBitCfg(p3);
 8000998:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f853 	bl	8000a48 <uart_stopBitCfg>
	uart_parityCfg(p4);
 80009a2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f874 	bl	8000a94 <uart_parityCfg>

	sprintf(buffer,text, p1, p2, p3, p4);
 80009ac:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80009b0:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 80009b4:	4638      	mov	r0, r7
 80009b6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	4613      	mov	r3, r2
 80009c4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80009c8:	f001 ff54 	bl	8002874 <siprintf>
	HAL_UART_Transmit(&UartHandle,(uint8_t *)buffer, strlen(buffer)/sizeof(char),0xFFFF);
 80009cc:	463b      	mov	r3, r7
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fc0e 	bl	80001f0 <strlen>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4639      	mov	r1, r7
 80009da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <uartPrintfConfiguration+0x84>)
 80009e0:	f001 fa2b 	bl	8001e3a <HAL_UART_Transmit>
}
 80009e4:	bf00      	nop
 80009e6:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	080030ec 	.word	0x080030ec
 80009f4:	2000017c 	.word	0x2000017c

080009f8 <uart_wordLengthCfg>:

static void uart_wordLengthCfg(char * wordLengthCfg)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	if(UART_WORDLENGTH_8B == UartHandle.Init.WordLength){
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <uart_wordLengthCfg+0x44>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d107      	bne.n	8000a18 <uart_wordLengthCfg+0x20>
		strcpy(wordLengthCfg,"8 bytes");
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	490d      	ldr	r1, [pc, #52]	; (8000a40 <uart_wordLengthCfg+0x48>)
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	460b      	mov	r3, r1
 8000a10:	cb03      	ldmia	r3!, {r0, r1}
 8000a12:	6010      	str	r0, [r2, #0]
 8000a14:	6051      	str	r1, [r2, #4]
	}else if(UART_WORDLENGTH_9B == UartHandle.Init.WordLength){
		strcpy(wordLengthCfg,"9 bytes");
	}
}
 8000a16:	e00b      	b.n	8000a30 <uart_wordLengthCfg+0x38>
	}else if(UART_WORDLENGTH_9B == UartHandle.Init.WordLength){
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <uart_wordLengthCfg+0x44>)
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a20:	d106      	bne.n	8000a30 <uart_wordLengthCfg+0x38>
		strcpy(wordLengthCfg,"9 bytes");
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4907      	ldr	r1, [pc, #28]	; (8000a44 <uart_wordLengthCfg+0x4c>)
 8000a26:	461a      	mov	r2, r3
 8000a28:	460b      	mov	r3, r1
 8000a2a:	cb03      	ldmia	r3!, {r0, r1}
 8000a2c:	6010      	str	r0, [r2, #0]
 8000a2e:	6051      	str	r1, [r2, #4]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	2000017c 	.word	0x2000017c
 8000a40:	08003144 	.word	0x08003144
 8000a44:	0800314c 	.word	0x0800314c

08000a48 <uart_stopBitCfg>:

static void uart_stopBitCfg(char * stopBitCfg)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	if(UART_STOPBITS_1 == UartHandle.Init.StopBits){
 8000a50:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <uart_stopBitCfg+0x40>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d106      	bne.n	8000a66 <uart_stopBitCfg+0x1e>
		strcpy(stopBitCfg,"1 bit");
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <uart_stopBitCfg+0x44>)
 8000a5c:	6810      	ldr	r0, [r2, #0]
 8000a5e:	6018      	str	r0, [r3, #0]
 8000a60:	8892      	ldrh	r2, [r2, #4]
 8000a62:	809a      	strh	r2, [r3, #4]
	}else if(UART_STOPBITS_2 == UartHandle.Init.StopBits){
		strcpy(stopBitCfg,"2 bit");
	}
}
 8000a64:	e00a      	b.n	8000a7c <uart_stopBitCfg+0x34>
	}else if(UART_STOPBITS_2 == UartHandle.Init.StopBits){
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <uart_stopBitCfg+0x40>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a6e:	d105      	bne.n	8000a7c <uart_stopBitCfg+0x34>
		strcpy(stopBitCfg,"2 bit");
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <uart_stopBitCfg+0x48>)
 8000a74:	6810      	ldr	r0, [r2, #0]
 8000a76:	6018      	str	r0, [r3, #0]
 8000a78:	8892      	ldrh	r2, [r2, #4]
 8000a7a:	809a      	strh	r2, [r3, #4]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	2000017c 	.word	0x2000017c
 8000a8c:	08003154 	.word	0x08003154
 8000a90:	0800315c 	.word	0x0800315c

08000a94 <uart_parityCfg>:

static void uart_parityCfg(char * parityCfg)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	if(UART_PARITY_NONE == UartHandle.Init.Parity){
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <uart_parityCfg+0x54>)
 8000a9e:	691b      	ldr	r3, [r3, #16]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d106      	bne.n	8000ab2 <uart_parityCfg+0x1e>
		strcpy(parityCfg,"None");
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a11      	ldr	r2, [pc, #68]	; (8000aec <uart_parityCfg+0x58>)
 8000aa8:	6810      	ldr	r0, [r2, #0]
 8000aaa:	6018      	str	r0, [r3, #0]
 8000aac:	7912      	ldrb	r2, [r2, #4]
 8000aae:	711a      	strb	r2, [r3, #4]
	}else if(UART_PARITY_EVEN == UartHandle.Init.Parity){
		strcpy(parityCfg,"par");
	}else if(UART_PARITY_ODD == UartHandle.Init.Parity){
		strcpy(parityCfg,"impar");
	}
}
 8000ab0:	e014      	b.n	8000adc <uart_parityCfg+0x48>
	}else if(UART_PARITY_EVEN == UartHandle.Init.Parity){
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <uart_parityCfg+0x54>)
 8000ab4:	691b      	ldr	r3, [r3, #16]
 8000ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aba:	d104      	bne.n	8000ac6 <uart_parityCfg+0x32>
		strcpy(parityCfg,"par");
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <uart_parityCfg+0x5c>)
 8000ac0:	6810      	ldr	r0, [r2, #0]
 8000ac2:	6018      	str	r0, [r3, #0]
}
 8000ac4:	e00a      	b.n	8000adc <uart_parityCfg+0x48>
	}else if(UART_PARITY_ODD == UartHandle.Init.Parity){
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <uart_parityCfg+0x54>)
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000ace:	d105      	bne.n	8000adc <uart_parityCfg+0x48>
		strcpy(parityCfg,"impar");
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <uart_parityCfg+0x60>)
 8000ad4:	6810      	ldr	r0, [r2, #0]
 8000ad6:	6018      	str	r0, [r3, #0]
 8000ad8:	8892      	ldrh	r2, [r2, #4]
 8000ada:	809a      	strh	r2, [r3, #4]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	2000017c 	.word	0x2000017c
 8000aec:	08003164 	.word	0x08003164
 8000af0:	0800316c 	.word	0x0800316c
 8000af4:	08003170 	.word	0x08003170

08000af8 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d10e      	bne.n	8000b26 <BSP_LED_Init+0x2e>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <BSP_LED_Init+0x94>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <BSP_LED_Init+0x94>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <BSP_LED_Init+0x94>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	e00d      	b.n	8000b42 <BSP_LED_Init+0x4a>
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <BSP_LED_Init+0x94>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <BSP_LED_Init+0x94>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <BSP_LED_Init+0x94>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <BSP_LED_Init+0x98>)
 8000b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000b54:	2302      	movs	r3, #2
 8000b56:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <BSP_LED_Init+0x9c>)
 8000b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b60:	f107 0214 	add.w	r2, r7, #20
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fa36 	bl	8000fd8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <BSP_LED_Init+0x9c>)
 8000b70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <BSP_LED_Init+0x98>)
 8000b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f000 fbd6 	bl	8001330 <HAL_GPIO_WritePin>
}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	08003240 	.word	0x08003240
 8000b94:	20000000 	.word	0x20000000

08000b98 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <BSP_LED_On+0x2c>)
 8000ba6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <BSP_LED_On+0x30>)
 8000bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f000 fbbb 	bl	8001330 <HAL_GPIO_WritePin>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	08003240 	.word	0x08003240

08000bcc <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <BSP_LED_Off+0x2c>)
 8000bda:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <BSP_LED_Off+0x30>)
 8000be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000be6:	2200      	movs	r2, #0
 8000be8:	4619      	mov	r1, r3
 8000bea:	f000 fba1 	bl	8001330 <HAL_GPIO_WritePin>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	08003240 	.word	0x08003240

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <SystemInit+0x60>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <SystemInit+0x60>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <SystemInit+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <SystemInit+0x64>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <SystemInit+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <SystemInit+0x64>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <SystemInit+0x64>)
 8000c2c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <SystemInit+0x64>)
 8000c38:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <SystemInit+0x68>)
 8000c3a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <SystemInit+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <SystemInit+0x64>)
 8000c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SystemInit+0x60>)
 8000c50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c54:	609a      	str	r2, [r3, #8]
#endif
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00
 8000c64:	40023800 	.word	0x40023800
 8000c68:	24003010 	.word	0x24003010

08000c6c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000cc0:	f000 f884 	bl	8000dcc <HAL_IncTick>
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <_sbrk+0x5c>)
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <_sbrk+0x60>)
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <_sbrk+0x64>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <_sbrk+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d207      	bcs.n	8000d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf8:	f001 fd84 	bl	8002804 <__errno>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	220c      	movs	r2, #12
 8000d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d06:	e009      	b.n	8000d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <_sbrk+0x64>)
 8000d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20030000 	.word	0x20030000
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	200000a0 	.word	0x200000a0
 8000d30:	200001d8 	.word	0x200001d8

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_Init+0x34>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_Init+0x34>)
 8000d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d42:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_Init+0x34>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <HAL_Init+0x34>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f000 f90d 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f000 f808 	bl	8000d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5c:	f000 fb54 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023c00 	.word	0x40023c00

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x54>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x58>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f917 	bl	8000fbe <HAL_SYSTICK_Config>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00e      	b.n	8000db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d80a      	bhi.n	8000db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da8:	f000 f8ed 	bl	8000f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <HAL_InitTick+0x5c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000000c 	.word	0x2000000c
 8000dc4:	20000014 	.word	0x20000014
 8000dc8:	20000010 	.word	0x20000010

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000014 	.word	0x20000014
 8000df0:	200001c0 	.word	0x200001c0

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200001c0 	.word	0x200001c0

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
         );
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	; 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f3c:	d301      	bcc.n	8000f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00f      	b.n	8000f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <SysTick_Config+0x40>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f50:	f7ff ff8e 	bl	8000e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <SysTick_Config+0x40>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SysTick_Config+0x40>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff47 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff5c 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ff8e 	bl	8000ec4 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5d 	bl	8000e70 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ffb0 	bl	8000f2c <SysTick_Config>
 8000fcc:	4603      	mov	r3, r0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	e177      	b.n	80012e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	429a      	cmp	r2, r3
 800100e:	f040 8166 	bne.w	80012de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b01      	cmp	r3, #1
 800101c:	d005      	beq.n	800102a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001026:	2b02      	cmp	r3, #2
 8001028:	d130      	bne.n	800108c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 0201 	and.w	r2, r3, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b03      	cmp	r3, #3
 8001096:	d017      	beq.n	80010c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d123      	bne.n	800111c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	69b9      	ldr	r1, [r7, #24]
 8001118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0203 	and.w	r2, r3, #3
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80c0 	beq.w	80012de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b66      	ldr	r3, [pc, #408]	; (80012fc <HAL_GPIO_Init+0x324>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a65      	ldr	r2, [pc, #404]	; (80012fc <HAL_GPIO_Init+0x324>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b63      	ldr	r3, [pc, #396]	; (80012fc <HAL_GPIO_Init+0x324>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117a:	4a61      	ldr	r2, [pc, #388]	; (8001300 <HAL_GPIO_Init+0x328>)
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a58      	ldr	r2, [pc, #352]	; (8001304 <HAL_GPIO_Init+0x32c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d037      	beq.n	8001216 <HAL_GPIO_Init+0x23e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a57      	ldr	r2, [pc, #348]	; (8001308 <HAL_GPIO_Init+0x330>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d031      	beq.n	8001212 <HAL_GPIO_Init+0x23a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a56      	ldr	r2, [pc, #344]	; (800130c <HAL_GPIO_Init+0x334>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d02b      	beq.n	800120e <HAL_GPIO_Init+0x236>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a55      	ldr	r2, [pc, #340]	; (8001310 <HAL_GPIO_Init+0x338>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d025      	beq.n	800120a <HAL_GPIO_Init+0x232>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a54      	ldr	r2, [pc, #336]	; (8001314 <HAL_GPIO_Init+0x33c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d01f      	beq.n	8001206 <HAL_GPIO_Init+0x22e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a53      	ldr	r2, [pc, #332]	; (8001318 <HAL_GPIO_Init+0x340>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d019      	beq.n	8001202 <HAL_GPIO_Init+0x22a>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a52      	ldr	r2, [pc, #328]	; (800131c <HAL_GPIO_Init+0x344>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0x226>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a51      	ldr	r2, [pc, #324]	; (8001320 <HAL_GPIO_Init+0x348>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d00d      	beq.n	80011fa <HAL_GPIO_Init+0x222>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a50      	ldr	r2, [pc, #320]	; (8001324 <HAL_GPIO_Init+0x34c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d007      	beq.n	80011f6 <HAL_GPIO_Init+0x21e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4f      	ldr	r2, [pc, #316]	; (8001328 <HAL_GPIO_Init+0x350>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d101      	bne.n	80011f2 <HAL_GPIO_Init+0x21a>
 80011ee:	2309      	movs	r3, #9
 80011f0:	e012      	b.n	8001218 <HAL_GPIO_Init+0x240>
 80011f2:	230a      	movs	r3, #10
 80011f4:	e010      	b.n	8001218 <HAL_GPIO_Init+0x240>
 80011f6:	2308      	movs	r3, #8
 80011f8:	e00e      	b.n	8001218 <HAL_GPIO_Init+0x240>
 80011fa:	2307      	movs	r3, #7
 80011fc:	e00c      	b.n	8001218 <HAL_GPIO_Init+0x240>
 80011fe:	2306      	movs	r3, #6
 8001200:	e00a      	b.n	8001218 <HAL_GPIO_Init+0x240>
 8001202:	2305      	movs	r3, #5
 8001204:	e008      	b.n	8001218 <HAL_GPIO_Init+0x240>
 8001206:	2304      	movs	r3, #4
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x240>
 800120a:	2303      	movs	r3, #3
 800120c:	e004      	b.n	8001218 <HAL_GPIO_Init+0x240>
 800120e:	2302      	movs	r3, #2
 8001210:	e002      	b.n	8001218 <HAL_GPIO_Init+0x240>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <HAL_GPIO_Init+0x240>
 8001216:	2300      	movs	r3, #0
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	f002 0203 	and.w	r2, r2, #3
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	4093      	lsls	r3, r2
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001228:	4935      	ldr	r1, [pc, #212]	; (8001300 <HAL_GPIO_Init+0x328>)
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	3302      	adds	r3, #2
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <HAL_GPIO_Init+0x354>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800125a:	4a34      	ldr	r2, [pc, #208]	; (800132c <HAL_GPIO_Init+0x354>)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <HAL_GPIO_Init+0x354>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001284:	4a29      	ldr	r2, [pc, #164]	; (800132c <HAL_GPIO_Init+0x354>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128a:	4b28      	ldr	r3, [pc, #160]	; (800132c <HAL_GPIO_Init+0x354>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ae:	4a1f      	ldr	r2, [pc, #124]	; (800132c <HAL_GPIO_Init+0x354>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <HAL_GPIO_Init+0x354>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d8:	4a14      	ldr	r2, [pc, #80]	; (800132c <HAL_GPIO_Init+0x354>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3301      	adds	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	2b0f      	cmp	r3, #15
 80012e8:	f67f ae84 	bls.w	8000ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3724      	adds	r7, #36	; 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	40013800 	.word	0x40013800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400
 800130c:	40020800 	.word	0x40020800
 8001310:	40020c00 	.word	0x40020c00
 8001314:	40021000 	.word	0x40021000
 8001318:	40021400 	.word	0x40021400
 800131c:	40021800 	.word	0x40021800
 8001320:	40021c00 	.word	0x40021c00
 8001324:	40022000 	.word	0x40022000
 8001328:	40022400 	.word	0x40022400
 800132c:	40013c00 	.word	0x40013c00

08001330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
 800133c:	4613      	mov	r3, r2
 800133e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001340:	787b      	ldrb	r3, [r7, #1]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800134c:	e003      	b.n	8001356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	041a      	lsls	r2, r3, #16
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	4b23      	ldr	r3, [pc, #140]	; (8001400 <HAL_UART_MspInit+0x9c>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4a22      	ldr	r2, [pc, #136]	; (8001400 <HAL_UART_MspInit+0x9c>)
 8001376:	f043 0308 	orr.w	r3, r3, #8
 800137a:	6313      	str	r3, [r2, #48]	; 0x30
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_UART_MspInit+0x9c>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_UART_MspInit+0x9c>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <HAL_UART_MspInit+0x9c>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6313      	str	r3, [r2, #48]	; 0x30
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_UART_MspInit+0x9c>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_UART_MspInit+0x9c>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_UART_MspInit+0x9c>)
 80013ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b2:	6413      	str	r3, [r2, #64]	; 0x40
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_UART_MspInit+0x9c>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80013c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80013d2:	2307      	movs	r3, #7
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4809      	ldr	r0, [pc, #36]	; (8001404 <HAL_UART_MspInit+0xa0>)
 80013de:	f7ff fdfb 	bl	8000fd8 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80013e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80013e8:	2307      	movs	r3, #7
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <HAL_UART_MspInit+0xa0>)
 80013f4:	f7ff fdf0 	bl	8000fd8 <HAL_GPIO_Init>
}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40020c00 	.word	0x40020c00

08001408 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_PWREx_EnableOverDrive+0x94>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001444:	f7ff fcd6 	bl	8000df4 <HAL_GetTick>
 8001448:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800144a:	e009      	b.n	8001460 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800144c:	f7ff fcd2 	bl	8000df4 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800145a:	d901      	bls.n	8001460 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e01f      	b.n	80014a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146c:	d1ee      	bne.n	800144c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001474:	f7ff fcbe 	bl	8000df4 <HAL_GetTick>
 8001478:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800147a:	e009      	b.n	8001490 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800147c:	f7ff fcba 	bl	8000df4 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800148a:	d901      	bls.n	8001490 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e007      	b.n	80014a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800149c:	d1ee      	bne.n	800147c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	420e0040 	.word	0x420e0040
 80014b0:	40007000 	.word	0x40007000
 80014b4:	420e0044 	.word	0x420e0044

080014b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e264      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d075      	beq.n	80015c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d6:	4ba3      	ldr	r3, [pc, #652]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d00c      	beq.n	80014fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e2:	4ba0      	ldr	r3, [pc, #640]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d112      	bne.n	8001514 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ee:	4b9d      	ldr	r3, [pc, #628]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014fa:	d10b      	bne.n	8001514 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	4b99      	ldr	r3, [pc, #612]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d05b      	beq.n	80015c0 <HAL_RCC_OscConfig+0x108>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d157      	bne.n	80015c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e23f      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d106      	bne.n	800152c <HAL_RCC_OscConfig+0x74>
 800151e:	4b91      	ldr	r3, [pc, #580]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a90      	ldr	r2, [pc, #576]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e01d      	b.n	8001568 <HAL_RCC_OscConfig+0xb0>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x98>
 8001536:	4b8b      	ldr	r3, [pc, #556]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a8a      	ldr	r2, [pc, #552]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b88      	ldr	r3, [pc, #544]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a87      	ldr	r2, [pc, #540]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0xb0>
 8001550:	4b84      	ldr	r3, [pc, #528]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a83      	ldr	r2, [pc, #524]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b81      	ldr	r3, [pc, #516]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a80      	ldr	r2, [pc, #512]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d013      	beq.n	8001598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fc40 	bl	8000df4 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fc3c 	bl	8000df4 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e204      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	4b76      	ldr	r3, [pc, #472]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0xc0>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fc2c 	bl	8000df4 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fc28 	bl	8000df4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e1f0      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	4b6c      	ldr	r3, [pc, #432]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0xe8>
 80015be:	e000      	b.n	80015c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d063      	beq.n	8001696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ce:	4b65      	ldr	r3, [pc, #404]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00b      	beq.n	80015f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015da:	4b62      	ldr	r3, [pc, #392]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d11c      	bne.n	8001620 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e6:	4b5f      	ldr	r3, [pc, #380]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d116      	bne.n	8001620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	4b5c      	ldr	r3, [pc, #368]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <HAL_RCC_OscConfig+0x152>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d001      	beq.n	800160a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e1c4      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160a:	4b56      	ldr	r3, [pc, #344]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4952      	ldr	r1, [pc, #328]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161e:	e03a      	b.n	8001696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001628:	4b4f      	ldr	r3, [pc, #316]	; (8001768 <HAL_RCC_OscConfig+0x2b0>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162e:	f7ff fbe1 	bl	8000df4 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff fbdd 	bl	8000df4 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e1a5      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	4b46      	ldr	r3, [pc, #280]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b43      	ldr	r3, [pc, #268]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4940      	ldr	r1, [pc, #256]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
 8001668:	e015      	b.n	8001696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166a:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_RCC_OscConfig+0x2b0>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fbc0 	bl	8000df4 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff fbbc 	bl	8000df4 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e184      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d030      	beq.n	8001704 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d016      	beq.n	80016d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016aa:	4b30      	ldr	r3, [pc, #192]	; (800176c <HAL_RCC_OscConfig+0x2b4>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fba0 	bl	8000df4 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff fb9c 	bl	8000df4 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e164      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x200>
 80016d6:	e015      	b.n	8001704 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_RCC_OscConfig+0x2b4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff fb89 	bl	8000df4 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e6:	f7ff fb85 	bl	8000df4 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e14d      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80a0 	beq.w	8001852 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10f      	bne.n	8001742 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173e:	2301      	movs	r3, #1
 8001740:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_RCC_OscConfig+0x2b8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174a:	2b00      	cmp	r3, #0
 800174c:	d121      	bne.n	8001792 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_RCC_OscConfig+0x2b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a07      	ldr	r2, [pc, #28]	; (8001770 <HAL_RCC_OscConfig+0x2b8>)
 8001754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175a:	f7ff fb4b 	bl	8000df4 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001760:	e011      	b.n	8001786 <HAL_RCC_OscConfig+0x2ce>
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	42470000 	.word	0x42470000
 800176c:	42470e80 	.word	0x42470e80
 8001770:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001774:	f7ff fb3e 	bl	8000df4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e106      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	4b85      	ldr	r3, [pc, #532]	; (800199c <HAL_RCC_OscConfig+0x4e4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d106      	bne.n	80017a8 <HAL_RCC_OscConfig+0x2f0>
 800179a:	4b81      	ldr	r3, [pc, #516]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179e:	4a80      	ldr	r2, [pc, #512]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6713      	str	r3, [r2, #112]	; 0x70
 80017a6:	e01c      	b.n	80017e2 <HAL_RCC_OscConfig+0x32a>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	d10c      	bne.n	80017ca <HAL_RCC_OscConfig+0x312>
 80017b0:	4b7b      	ldr	r3, [pc, #492]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b4:	4a7a      	ldr	r2, [pc, #488]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 80017b6:	f043 0304 	orr.w	r3, r3, #4
 80017ba:	6713      	str	r3, [r2, #112]	; 0x70
 80017bc:	4b78      	ldr	r3, [pc, #480]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	4a77      	ldr	r2, [pc, #476]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
 80017c8:	e00b      	b.n	80017e2 <HAL_RCC_OscConfig+0x32a>
 80017ca:	4b75      	ldr	r3, [pc, #468]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ce:	4a74      	ldr	r2, [pc, #464]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	6713      	str	r3, [r2, #112]	; 0x70
 80017d6:	4b72      	ldr	r3, [pc, #456]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017da:	4a71      	ldr	r2, [pc, #452]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d015      	beq.n	8001816 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ea:	f7ff fb03 	bl	8000df4 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f0:	e00a      	b.n	8001808 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f7ff faff 	bl	8000df4 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e0c5      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001808:	4b65      	ldr	r3, [pc, #404]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 800180a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ee      	beq.n	80017f2 <HAL_RCC_OscConfig+0x33a>
 8001814:	e014      	b.n	8001840 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff faed 	bl	8000df4 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181c:	e00a      	b.n	8001834 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff fae9 	bl	8000df4 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	f241 3288 	movw	r2, #5000	; 0x1388
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e0af      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001834:	4b5a      	ldr	r3, [pc, #360]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1ee      	bne.n	800181e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d105      	bne.n	8001852 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001846:	4b56      	ldr	r3, [pc, #344]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a55      	ldr	r2, [pc, #340]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 800184c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 809b 	beq.w	8001992 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800185c:	4b50      	ldr	r3, [pc, #320]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b08      	cmp	r3, #8
 8001866:	d05c      	beq.n	8001922 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d141      	bne.n	80018f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001870:	4b4c      	ldr	r3, [pc, #304]	; (80019a4 <HAL_RCC_OscConfig+0x4ec>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff fabd 	bl	8000df4 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187e:	f7ff fab9 	bl	8000df4 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e081      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001890:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f0      	bne.n	800187e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69da      	ldr	r2, [r3, #28]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	019b      	lsls	r3, r3, #6
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b2:	085b      	lsrs	r3, r3, #1
 80018b4:	3b01      	subs	r3, #1
 80018b6:	041b      	lsls	r3, r3, #16
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	061b      	lsls	r3, r3, #24
 80018c0:	4937      	ldr	r1, [pc, #220]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <HAL_RCC_OscConfig+0x4ec>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fa92 	bl	8000df4 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff fa8e 	bl	8000df4 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e056      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x41c>
 80018f2:	e04e      	b.n	8001992 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f4:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_RCC_OscConfig+0x4ec>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fa:	f7ff fa7b 	bl	8000df4 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001902:	f7ff fa77 	bl	8000df4 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e03f      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001914:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x44a>
 8001920:	e037      	b.n	8001992 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e032      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800192e:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <HAL_RCC_OscConfig+0x4e8>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d028      	beq.n	800198e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d121      	bne.n	800198e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d11a      	bne.n	800198e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800195e:	4013      	ands	r3, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001964:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001966:	4293      	cmp	r3, r2
 8001968:	d111      	bne.n	800198e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	085b      	lsrs	r3, r3, #1
 8001976:	3b01      	subs	r3, #1
 8001978:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800197a:	429a      	cmp	r2, r3
 800197c:	d107      	bne.n	800198e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40007000 	.word	0x40007000
 80019a0:	40023800 	.word	0x40023800
 80019a4:	42470060 	.word	0x42470060

080019a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0cc      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d90c      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0b8      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019fc:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a52      	ldr	r2, [pc, #328]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	494d      	ldr	r1, [pc, #308]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d044      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d119      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e07f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e06f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e067      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4934      	ldr	r1, [pc, #208]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a98:	f7ff f9ac 	bl	8000df4 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff f9a8 	bl	8000df4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e04f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d20c      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e032      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4916      	ldr	r1, [pc, #88]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	490e      	ldr	r1, [pc, #56]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2e:	f000 f821 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	490a      	ldr	r1, [pc, #40]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	5ccb      	ldrb	r3, [r1, r3]
 8001b42:	fa22 f303 	lsr.w	r3, r2, r3
 8001b46:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f90c 	bl	8000d6c <HAL_InitTick>

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08003248 	.word	0x08003248
 8001b6c:	2000000c 	.word	0x2000000c
 8001b70:	20000010 	.word	0x20000010

08001b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	2300      	movs	r3, #0
 8001b86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b8c:	4b67      	ldr	r3, [pc, #412]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d00d      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	f200 80bd 	bhi.w	8001d18 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d003      	beq.n	8001bae <HAL_RCC_GetSysClockFreq+0x3a>
 8001ba6:	e0b7      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba8:	4b61      	ldr	r3, [pc, #388]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001baa:	60bb      	str	r3, [r7, #8]
       break;
 8001bac:	e0b7      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bae:	4b61      	ldr	r3, [pc, #388]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001bb0:	60bb      	str	r3, [r7, #8]
      break;
 8001bb2:	e0b4      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb4:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bbe:	4b5b      	ldr	r3, [pc, #364]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d04d      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bca:	4b58      	ldr	r3, [pc, #352]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	099b      	lsrs	r3, r3, #6
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bda:	f04f 0100 	mov.w	r1, #0
 8001bde:	ea02 0800 	and.w	r8, r2, r0
 8001be2:	ea03 0901 	and.w	r9, r3, r1
 8001be6:	4640      	mov	r0, r8
 8001be8:	4649      	mov	r1, r9
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	014b      	lsls	r3, r1, #5
 8001bf4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bf8:	0142      	lsls	r2, r0, #5
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	ebb0 0008 	subs.w	r0, r0, r8
 8001c02:	eb61 0109 	sbc.w	r1, r1, r9
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	018b      	lsls	r3, r1, #6
 8001c10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c14:	0182      	lsls	r2, r0, #6
 8001c16:	1a12      	subs	r2, r2, r0
 8001c18:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1c:	f04f 0000 	mov.w	r0, #0
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	00d9      	lsls	r1, r3, #3
 8001c26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c2a:	00d0      	lsls	r0, r2, #3
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	eb12 0208 	adds.w	r2, r2, r8
 8001c34:	eb43 0309 	adc.w	r3, r3, r9
 8001c38:	f04f 0000 	mov.w	r0, #0
 8001c3c:	f04f 0100 	mov.w	r1, #0
 8001c40:	0259      	lsls	r1, r3, #9
 8001c42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c46:	0250      	lsls	r0, r2, #9
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	461a      	mov	r2, r3
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	f7fe fb22 	bl	80002a0 <__aeabi_uldivmod>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4613      	mov	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	e04a      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c66:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	099b      	lsrs	r3, r3, #6
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c76:	f04f 0100 	mov.w	r1, #0
 8001c7a:	ea02 0400 	and.w	r4, r2, r0
 8001c7e:	ea03 0501 	and.w	r5, r3, r1
 8001c82:	4620      	mov	r0, r4
 8001c84:	4629      	mov	r1, r5
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	014b      	lsls	r3, r1, #5
 8001c90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c94:	0142      	lsls	r2, r0, #5
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	1b00      	subs	r0, r0, r4
 8001c9c:	eb61 0105 	sbc.w	r1, r1, r5
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	018b      	lsls	r3, r1, #6
 8001caa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cae:	0182      	lsls	r2, r0, #6
 8001cb0:	1a12      	subs	r2, r2, r0
 8001cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cb6:	f04f 0000 	mov.w	r0, #0
 8001cba:	f04f 0100 	mov.w	r1, #0
 8001cbe:	00d9      	lsls	r1, r3, #3
 8001cc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cc4:	00d0      	lsls	r0, r2, #3
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	1912      	adds	r2, r2, r4
 8001ccc:	eb45 0303 	adc.w	r3, r5, r3
 8001cd0:	f04f 0000 	mov.w	r0, #0
 8001cd4:	f04f 0100 	mov.w	r1, #0
 8001cd8:	0299      	lsls	r1, r3, #10
 8001cda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cde:	0290      	lsls	r0, r2, #10
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	461a      	mov	r2, r3
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	f7fe fad6 	bl	80002a0 <__aeabi_uldivmod>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	3301      	adds	r3, #1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	60bb      	str	r3, [r7, #8]
      break;
 8001d16:	e002      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d1a:	60bb      	str	r3, [r7, #8]
      break;
 8001d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	007a1200 	.word	0x007a1200

08001d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	2000000c 	.word	0x2000000c

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0a9b      	lsrs	r3, r3, #10
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08003258 	.word	0x08003258

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d7c:	f7ff ffdc 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0b5b      	lsrs	r3, r3, #13
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08003258 	.word	0x08003258

08001da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e03f      	b.n	8001e32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff facc 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2224      	movs	r2, #36	; 0x24
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f9cb 	bl	8002180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b08a      	sub	sp, #40	; 0x28
 8001e3e:	af02      	add	r7, sp, #8
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4613      	mov	r3, r2
 8001e48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	d17c      	bne.n	8001f54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <HAL_UART_Transmit+0x2c>
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e075      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_UART_Transmit+0x3e>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e06e      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2221      	movs	r2, #33	; 0x21
 8001e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e8e:	f7fe ffb1 	bl	8000df4 <HAL_GetTick>
 8001e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	88fa      	ldrh	r2, [r7, #6]
 8001e98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	88fa      	ldrh	r2, [r7, #6]
 8001e9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea8:	d108      	bne.n	8001ebc <HAL_UART_Transmit+0x82>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d104      	bne.n	8001ebc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	e003      	b.n	8001ec4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ecc:	e02a      	b.n	8001f24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f8e2 	bl	80020a2 <UART_WaitOnFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e036      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10b      	bne.n	8001f06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	3302      	adds	r3, #2
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	e007      	b.n	8001f16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	781a      	ldrb	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	3301      	adds	r3, #1
 8001f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1cf      	bne.n	8001ece <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2200      	movs	r2, #0
 8001f36:	2140      	movs	r1, #64	; 0x40
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f8b2 	bl	80020a2 <UART_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e006      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	e000      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
  }
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b08a      	sub	sp, #40	; 0x28
 8001f62:	af02      	add	r7, sp, #8
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b20      	cmp	r3, #32
 8001f7c:	f040 808c 	bne.w	8002098 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_UART_Receive+0x2e>
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e084      	b.n	800209a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_UART_Receive+0x40>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e07d      	b.n	800209a <HAL_UART_Receive+0x13c>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2222      	movs	r2, #34	; 0x22
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fba:	f7fe ff1b 	bl	8000df4 <HAL_GetTick>
 8001fbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	88fa      	ldrh	r2, [r7, #6]
 8001fc4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	88fa      	ldrh	r2, [r7, #6]
 8001fca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd4:	d108      	bne.n	8001fe8 <HAL_UART_Receive+0x8a>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d104      	bne.n	8001fe8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	e003      	b.n	8001ff0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001ff8:	e043      	b.n	8002082 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2200      	movs	r2, #0
 8002002:	2120      	movs	r1, #32
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f84c 	bl	80020a2 <UART_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e042      	b.n	800209a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10c      	bne.n	8002034 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	b29b      	uxth	r3, r3
 8002022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002026:	b29a      	uxth	r2, r3
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	3302      	adds	r3, #2
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	e01f      	b.n	8002074 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203c:	d007      	beq.n	800204e <HAL_UART_Receive+0xf0>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10a      	bne.n	800205c <HAL_UART_Receive+0xfe>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	e008      	b.n	800206e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002068:	b2da      	uxtb	r2, r3
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3301      	adds	r3, #1
 8002072:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002078:	b29b      	uxth	r3, r3
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002086:	b29b      	uxth	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1b6      	bne.n	8001ffa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	e000      	b.n	800209a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002098:	2302      	movs	r3, #2
  }
}
 800209a:	4618      	mov	r0, r3
 800209c:	3720      	adds	r7, #32
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b090      	sub	sp, #64	; 0x40
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	4613      	mov	r3, r2
 80020b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020b2:	e050      	b.n	8002156 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ba:	d04c      	beq.n	8002156 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80020c2:	f7fe fe97 	bl	8000df4 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d241      	bcs.n	8002156 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	330c      	adds	r3, #12
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	e853 3f00 	ldrex	r3, [r3]
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	330c      	adds	r3, #12
 80020f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020f2:	637a      	str	r2, [r7, #52]	; 0x34
 80020f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020fa:	e841 2300 	strex	r3, r2, [r1]
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1e5      	bne.n	80020d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3314      	adds	r3, #20
 800210c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	e853 3f00 	ldrex	r3, [r3]
 8002114:	613b      	str	r3, [r7, #16]
   return(result);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	63bb      	str	r3, [r7, #56]	; 0x38
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3314      	adds	r3, #20
 8002124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002126:	623a      	str	r2, [r7, #32]
 8002128:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212a:	69f9      	ldr	r1, [r7, #28]
 800212c:	6a3a      	ldr	r2, [r7, #32]
 800212e:	e841 2300 	strex	r3, r2, [r1]
 8002132:	61bb      	str	r3, [r7, #24]
   return(result);
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1e5      	bne.n	8002106 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e00f      	b.n	8002176 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4013      	ands	r3, r2
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	429a      	cmp	r2, r3
 8002164:	bf0c      	ite	eq
 8002166:	2301      	moveq	r3, #1
 8002168:	2300      	movne	r3, #0
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	429a      	cmp	r2, r3
 8002172:	d09f      	beq.n	80020b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3740      	adds	r7, #64	; 0x40
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002184:	b09f      	sub	sp, #124	; 0x7c
 8002186:	af00      	add	r7, sp, #0
 8002188:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800218a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002196:	68d9      	ldr	r1, [r3, #12]
 8002198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	ea40 0301 	orr.w	r3, r0, r1
 80021a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80021ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80021c4:	f021 010c 	bic.w	r1, r1, #12
 80021c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ce:	430b      	orrs	r3, r1
 80021d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021de:	6999      	ldr	r1, [r3, #24]
 80021e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	ea40 0301 	orr.w	r3, r0, r1
 80021e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4bc5      	ldr	r3, [pc, #788]	; (8002504 <UART_SetConfig+0x384>)
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d004      	beq.n	80021fe <UART_SetConfig+0x7e>
 80021f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4bc3      	ldr	r3, [pc, #780]	; (8002508 <UART_SetConfig+0x388>)
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d103      	bne.n	8002206 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021fe:	f7ff fdbb 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8002202:	6778      	str	r0, [r7, #116]	; 0x74
 8002204:	e002      	b.n	800220c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002206:	f7ff fda3 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 800220a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800220c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002214:	f040 80b6 	bne.w	8002384 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800221a:	461c      	mov	r4, r3
 800221c:	f04f 0500 	mov.w	r5, #0
 8002220:	4622      	mov	r2, r4
 8002222:	462b      	mov	r3, r5
 8002224:	1891      	adds	r1, r2, r2
 8002226:	6439      	str	r1, [r7, #64]	; 0x40
 8002228:	415b      	adcs	r3, r3
 800222a:	647b      	str	r3, [r7, #68]	; 0x44
 800222c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002230:	1912      	adds	r2, r2, r4
 8002232:	eb45 0303 	adc.w	r3, r5, r3
 8002236:	f04f 0000 	mov.w	r0, #0
 800223a:	f04f 0100 	mov.w	r1, #0
 800223e:	00d9      	lsls	r1, r3, #3
 8002240:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002244:	00d0      	lsls	r0, r2, #3
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	1911      	adds	r1, r2, r4
 800224c:	6639      	str	r1, [r7, #96]	; 0x60
 800224e:	416b      	adcs	r3, r5
 8002250:	667b      	str	r3, [r7, #100]	; 0x64
 8002252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	461a      	mov	r2, r3
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	1891      	adds	r1, r2, r2
 800225e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002260:	415b      	adcs	r3, r3
 8002262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002268:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800226c:	f7fe f818 	bl	80002a0 <__aeabi_uldivmod>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4ba5      	ldr	r3, [pc, #660]	; (800250c <UART_SetConfig+0x38c>)
 8002276:	fba3 2302 	umull	r2, r3, r3, r2
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	011e      	lsls	r6, r3, #4
 800227e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002280:	461c      	mov	r4, r3
 8002282:	f04f 0500 	mov.w	r5, #0
 8002286:	4622      	mov	r2, r4
 8002288:	462b      	mov	r3, r5
 800228a:	1891      	adds	r1, r2, r2
 800228c:	6339      	str	r1, [r7, #48]	; 0x30
 800228e:	415b      	adcs	r3, r3
 8002290:	637b      	str	r3, [r7, #52]	; 0x34
 8002292:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002296:	1912      	adds	r2, r2, r4
 8002298:	eb45 0303 	adc.w	r3, r5, r3
 800229c:	f04f 0000 	mov.w	r0, #0
 80022a0:	f04f 0100 	mov.w	r1, #0
 80022a4:	00d9      	lsls	r1, r3, #3
 80022a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022aa:	00d0      	lsls	r0, r2, #3
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	1911      	adds	r1, r2, r4
 80022b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80022b4:	416b      	adcs	r3, r5
 80022b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	461a      	mov	r2, r3
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	1891      	adds	r1, r2, r2
 80022c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80022c6:	415b      	adcs	r3, r3
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80022d2:	f7fd ffe5 	bl	80002a0 <__aeabi_uldivmod>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4b8c      	ldr	r3, [pc, #560]	; (800250c <UART_SetConfig+0x38c>)
 80022dc:	fba3 1302 	umull	r1, r3, r3, r2
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	2164      	movs	r1, #100	; 0x64
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	3332      	adds	r3, #50	; 0x32
 80022ee:	4a87      	ldr	r2, [pc, #540]	; (800250c <UART_SetConfig+0x38c>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022fc:	441e      	add	r6, r3
 80022fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002300:	4618      	mov	r0, r3
 8002302:	f04f 0100 	mov.w	r1, #0
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	1894      	adds	r4, r2, r2
 800230c:	623c      	str	r4, [r7, #32]
 800230e:	415b      	adcs	r3, r3
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
 8002312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002316:	1812      	adds	r2, r2, r0
 8002318:	eb41 0303 	adc.w	r3, r1, r3
 800231c:	f04f 0400 	mov.w	r4, #0
 8002320:	f04f 0500 	mov.w	r5, #0
 8002324:	00dd      	lsls	r5, r3, #3
 8002326:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800232a:	00d4      	lsls	r4, r2, #3
 800232c:	4622      	mov	r2, r4
 800232e:	462b      	mov	r3, r5
 8002330:	1814      	adds	r4, r2, r0
 8002332:	653c      	str	r4, [r7, #80]	; 0x50
 8002334:	414b      	adcs	r3, r1
 8002336:	657b      	str	r3, [r7, #84]	; 0x54
 8002338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	461a      	mov	r2, r3
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	1891      	adds	r1, r2, r2
 8002344:	61b9      	str	r1, [r7, #24]
 8002346:	415b      	adcs	r3, r3
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800234e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002352:	f7fd ffa5 	bl	80002a0 <__aeabi_uldivmod>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4b6c      	ldr	r3, [pc, #432]	; (800250c <UART_SetConfig+0x38c>)
 800235c:	fba3 1302 	umull	r1, r3, r3, r2
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	2164      	movs	r1, #100	; 0x64
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	3332      	adds	r3, #50	; 0x32
 800236e:	4a67      	ldr	r2, [pc, #412]	; (800250c <UART_SetConfig+0x38c>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	f003 0207 	and.w	r2, r3, #7
 800237a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4432      	add	r2, r6
 8002380:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002382:	e0b9      	b.n	80024f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002386:	461c      	mov	r4, r3
 8002388:	f04f 0500 	mov.w	r5, #0
 800238c:	4622      	mov	r2, r4
 800238e:	462b      	mov	r3, r5
 8002390:	1891      	adds	r1, r2, r2
 8002392:	6139      	str	r1, [r7, #16]
 8002394:	415b      	adcs	r3, r3
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800239c:	1912      	adds	r2, r2, r4
 800239e:	eb45 0303 	adc.w	r3, r5, r3
 80023a2:	f04f 0000 	mov.w	r0, #0
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	00d9      	lsls	r1, r3, #3
 80023ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023b0:	00d0      	lsls	r0, r2, #3
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	eb12 0804 	adds.w	r8, r2, r4
 80023ba:	eb43 0905 	adc.w	r9, r3, r5
 80023be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f04f 0100 	mov.w	r1, #0
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	008b      	lsls	r3, r1, #2
 80023d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023d6:	0082      	lsls	r2, r0, #2
 80023d8:	4640      	mov	r0, r8
 80023da:	4649      	mov	r1, r9
 80023dc:	f7fd ff60 	bl	80002a0 <__aeabi_uldivmod>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4b49      	ldr	r3, [pc, #292]	; (800250c <UART_SetConfig+0x38c>)
 80023e6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	011e      	lsls	r6, r3, #4
 80023ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f0:	4618      	mov	r0, r3
 80023f2:	f04f 0100 	mov.w	r1, #0
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	1894      	adds	r4, r2, r2
 80023fc:	60bc      	str	r4, [r7, #8]
 80023fe:	415b      	adcs	r3, r3
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002406:	1812      	adds	r2, r2, r0
 8002408:	eb41 0303 	adc.w	r3, r1, r3
 800240c:	f04f 0400 	mov.w	r4, #0
 8002410:	f04f 0500 	mov.w	r5, #0
 8002414:	00dd      	lsls	r5, r3, #3
 8002416:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800241a:	00d4      	lsls	r4, r2, #3
 800241c:	4622      	mov	r2, r4
 800241e:	462b      	mov	r3, r5
 8002420:	1814      	adds	r4, r2, r0
 8002422:	64bc      	str	r4, [r7, #72]	; 0x48
 8002424:	414b      	adcs	r3, r1
 8002426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4618      	mov	r0, r3
 800242e:	f04f 0100 	mov.w	r1, #0
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	008b      	lsls	r3, r1, #2
 800243c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002440:	0082      	lsls	r2, r0, #2
 8002442:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002446:	f7fd ff2b 	bl	80002a0 <__aeabi_uldivmod>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4b2f      	ldr	r3, [pc, #188]	; (800250c <UART_SetConfig+0x38c>)
 8002450:	fba3 1302 	umull	r1, r3, r3, r2
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	2164      	movs	r1, #100	; 0x64
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	3332      	adds	r3, #50	; 0x32
 8002462:	4a2a      	ldr	r2, [pc, #168]	; (800250c <UART_SetConfig+0x38c>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800246e:	441e      	add	r6, r3
 8002470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002472:	4618      	mov	r0, r3
 8002474:	f04f 0100 	mov.w	r1, #0
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	1894      	adds	r4, r2, r2
 800247e:	603c      	str	r4, [r7, #0]
 8002480:	415b      	adcs	r3, r3
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002488:	1812      	adds	r2, r2, r0
 800248a:	eb41 0303 	adc.w	r3, r1, r3
 800248e:	f04f 0400 	mov.w	r4, #0
 8002492:	f04f 0500 	mov.w	r5, #0
 8002496:	00dd      	lsls	r5, r3, #3
 8002498:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800249c:	00d4      	lsls	r4, r2, #3
 800249e:	4622      	mov	r2, r4
 80024a0:	462b      	mov	r3, r5
 80024a2:	eb12 0a00 	adds.w	sl, r2, r0
 80024a6:	eb43 0b01 	adc.w	fp, r3, r1
 80024aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f04f 0100 	mov.w	r1, #0
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	008b      	lsls	r3, r1, #2
 80024be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80024c2:	0082      	lsls	r2, r0, #2
 80024c4:	4650      	mov	r0, sl
 80024c6:	4659      	mov	r1, fp
 80024c8:	f7fd feea 	bl	80002a0 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <UART_SetConfig+0x38c>)
 80024d2:	fba3 1302 	umull	r1, r3, r3, r2
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	2164      	movs	r1, #100	; 0x64
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	3332      	adds	r3, #50	; 0x32
 80024e4:	4a09      	ldr	r2, [pc, #36]	; (800250c <UART_SetConfig+0x38c>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	f003 020f 	and.w	r2, r3, #15
 80024f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4432      	add	r2, r6
 80024f6:	609a      	str	r2, [r3, #8]
}
 80024f8:	bf00      	nop
 80024fa:	377c      	adds	r7, #124	; 0x7c
 80024fc:	46bd      	mov	sp, r7
 80024fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002502:	bf00      	nop
 8002504:	40011000 	.word	0x40011000
 8002508:	40011400 	.word	0x40011400
 800250c:	51eb851f 	.word	0x51eb851f

08002510 <set_leds_up_motor>:
static void set_leds_stop_motor(void);
static void printf_fms_state_and_sensor(void);
/* Private functions ---------------------------------------------------------*/

static void set_leds_up_motor(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
	 BSP_LED_On(LED1);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe fb3e 	bl	8000b98 <BSP_LED_On>
	 BSP_LED_Off(LED2);
 800251c:	2001      	movs	r0, #1
 800251e:	f7fe fb55 	bl	8000bcc <BSP_LED_Off>
	 BSP_LED_Off(LED3);
 8002522:	2002      	movs	r0, #2
 8002524:	f7fe fb52 	bl	8000bcc <BSP_LED_Off>

	 char motorInfo[] = "Motor UP \n";
 8002528:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <set_leds_up_motor+0x48>)
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	ca07      	ldmia	r2, {r0, r1, r2}
 800252e:	c303      	stmia	r3!, {r0, r1}
 8002530:	801a      	strh	r2, [r3, #0]
 8002532:	3302      	adds	r3, #2
 8002534:	0c12      	lsrs	r2, r2, #16
 8002536:	701a      	strb	r2, [r3, #0]
	 uartSendString((uint8_t *)motorInfo,strlen(motorInfo)/sizeof(char));
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd fe58 	bl	80001f0 <strlen>
 8002540:	4603      	mov	r3, r0
 8002542:	b29a      	uxth	r2, r3
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe f9eb 	bl	8000924 <uartSendString>
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	08003178 	.word	0x08003178

0800255c <set_leds_down_motor>:

static void set_leds_down_motor(void)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 8002562:	2000      	movs	r0, #0
 8002564:	f7fe fb32 	bl	8000bcc <BSP_LED_Off>
	BSP_LED_On(LED2);
 8002568:	2001      	movs	r0, #1
 800256a:	f7fe fb15 	bl	8000b98 <BSP_LED_On>
	BSP_LED_Off(LED3);
 800256e:	2002      	movs	r0, #2
 8002570:	f7fe fb2c 	bl	8000bcc <BSP_LED_Off>

	char motorInfo[] = "Motor DOWN \n";
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <set_leds_down_motor+0x40>)
 8002576:	463c      	mov	r4, r7
 8002578:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800257a:	c407      	stmia	r4!, {r0, r1, r2}
 800257c:	7023      	strb	r3, [r4, #0]
	uartSendString((uint8_t *)motorInfo,strlen(motorInfo)/sizeof(char));
 800257e:	463b      	mov	r3, r7
 8002580:	4618      	mov	r0, r3
 8002582:	f7fd fe35 	bl	80001f0 <strlen>
 8002586:	4603      	mov	r3, r0
 8002588:	b29a      	uxth	r2, r3
 800258a:	463b      	mov	r3, r7
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe f9c8 	bl	8000924 <uartSendString>
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bd90      	pop	{r4, r7, pc}
 800259c:	08003184 	.word	0x08003184

080025a0 <set_leds_stop_motor>:

static void set_leds_stop_motor(void)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe fb10 	bl	8000bcc <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7fe fb0d 	bl	8000bcc <BSP_LED_Off>
	BSP_LED_On(LED3);
 80025b2:	2002      	movs	r0, #2
 80025b4:	f7fe faf0 	bl	8000b98 <BSP_LED_On>

	char motorInfo[] = "Motor STOP \n";
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <set_leds_stop_motor+0x40>)
 80025ba:	463c      	mov	r4, r7
 80025bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025be:	c407      	stmia	r4!, {r0, r1, r2}
 80025c0:	7023      	strb	r3, [r4, #0]
	uartSendString((uint8_t *)motorInfo,strlen(motorInfo)/sizeof(char));
 80025c2:	463b      	mov	r3, r7
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd fe13 	bl	80001f0 <strlen>
 80025ca:	4603      	mov	r3, r0
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	463b      	mov	r3, r7
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe f9a6 	bl	8000924 <uartSendString>
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd90      	pop	{r4, r7, pc}
 80025e0:	08003194 	.word	0x08003194

080025e4 <printf_fms_state_and_sensor>:

static void printf_fms_state_and_sensor(void)
{
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af04      	add	r7, sp, #16

	char stateFsm[10];
	controllerGetState(stateFsm);
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe f87d 	bl	80006ec <controllerGetState>
			"Sensor Reader (a) -> %d "
			"Sensor Top gate (b) -> %d \n"
			"Sensor Vehicle Loop Detector (c) -> %d "
			"Sensor Bottom Gate (d) -> %d \n",
			stateFsm,
			sensorsInfo.readerRFID,
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <printf_fms_state_and_sensor+0x50>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
	sprintf((char *)fsm_info,
 80025f6:	461c      	mov	r4, r3
			sensorsInfo.limitSwitchTop,
 80025f8:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <printf_fms_state_and_sensor+0x50>)
 80025fa:	789b      	ldrb	r3, [r3, #2]
	sprintf((char *)fsm_info,
 80025fc:	4619      	mov	r1, r3
			sensorsInfo.loopDetector,
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <printf_fms_state_and_sensor+0x50>)
 8002600:	785b      	ldrb	r3, [r3, #1]
	sprintf((char *)fsm_info,
 8002602:	4618      	mov	r0, r3
			sensorsInfo.limitSwitchBottom);
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <printf_fms_state_and_sensor+0x50>)
 8002606:	78db      	ldrb	r3, [r3, #3]
	sprintf((char *)fsm_info,
 8002608:	1d3a      	adds	r2, r7, #4
 800260a:	9302      	str	r3, [sp, #8]
 800260c:	9001      	str	r0, [sp, #4]
 800260e:	9100      	str	r1, [sp, #0]
 8002610:	4623      	mov	r3, r4
 8002612:	4909      	ldr	r1, [pc, #36]	; (8002638 <printf_fms_state_and_sensor+0x54>)
 8002614:	4809      	ldr	r0, [pc, #36]	; (800263c <printf_fms_state_and_sensor+0x58>)
 8002616:	f000 f92d 	bl	8002874 <siprintf>

	uartSendString((uint8_t *)fsm_info, strlen((char *)fsm_info)/sizeof(uint8_t));
 800261a:	4808      	ldr	r0, [pc, #32]	; (800263c <printf_fms_state_and_sensor+0x58>)
 800261c:	f7fd fde8 	bl	80001f0 <strlen>
 8002620:	4603      	mov	r3, r0
 8002622:	b29b      	uxth	r3, r3
 8002624:	4619      	mov	r1, r3
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <printf_fms_state_and_sensor+0x58>)
 8002628:	f7fe f97c 	bl	8000924 <uartSendString>
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bd90      	pop	{r4, r7, pc}
 8002634:	20000170 	.word	0x20000170
 8002638:	080031a4 	.word	0x080031a4
 800263c:	200000a4 	.word	0x200000a4

08002640 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8002646:	f7fe fb75 	bl	8000d34 <HAL_Init>
  //__USART3_CLK_ENABLE();
  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 800264a:	f000 f849 	bl	80026e0 <SystemClock_Config>

  /* Initialize BSP Led for LED2 and LED3*/
  BSP_LED_Init(LED1);
 800264e:	2000      	movs	r0, #0
 8002650:	f7fe fa52 	bl	8000af8 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8002654:	2001      	movs	r0, #1
 8002656:	f7fe fa4f 	bl	8000af8 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800265a:	2002      	movs	r0, #2
 800265c:	f7fe fa4c 	bl	8000af8 <BSP_LED_Init>
  //HAL_GPIO_WritePin();

  /* Initialize UART */
  uartInit();
 8002660:	f7fe f92e 	bl	80008c0 <uartInit>

  /* Initialize Simulation Sensor */
  sensorInit(&sensorsInfo);
 8002664:	481c      	ldr	r0, [pc, #112]	; (80026d8 <main+0x98>)
 8002666:	f7fe f889 	bl	800077c <sensorInit>

  /* Initialize the gate controller */
  controllerGateInit(&sensorsInfo);
 800266a:	481b      	ldr	r0, [pc, #108]	; (80026d8 <main+0x98>)
 800266c:	f7fd ff94 	bl	8000598 <controllerGateInit>
  printf_fms_state_and_sensor();
 8002670:	f7ff ffb8 	bl	80025e4 <printf_fms_state_and_sensor>

  uint8_t OldStateMotor = MOTOR_STOP;
 8002674:	2302      	movs	r3, #2
 8002676:	71fb      	strb	r3, [r7, #7]
  uint8_t newStateMotor = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	71bb      	strb	r3, [r7, #6]

  BSP_LED_On(LED3);
 800267c:	2002      	movs	r0, #2
 800267e:	f7fe fa8b 	bl	8000b98 <BSP_LED_On>

  /* Infinite loop */
  while (1)
  {
	  UartReceivedChar(&rcvData);
 8002682:	4816      	ldr	r0, [pc, #88]	; (80026dc <main+0x9c>)
 8002684:	f7fe f964 	bl	8000950 <UartReceivedChar>

	  sensorUpdateState(rcvData, &sensorsInfo);
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <main+0x9c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4912      	ldr	r1, [pc, #72]	; (80026d8 <main+0x98>)
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe f898 	bl	80007c4 <sensorUpdateState>

	  newStateMotor = controllerGateUpdate(&sensorsInfo);
 8002694:	4810      	ldr	r0, [pc, #64]	; (80026d8 <main+0x98>)
 8002696:	f7fd ffa3 	bl	80005e0 <controllerGateUpdate>
 800269a:	4603      	mov	r3, r0
 800269c:	71bb      	strb	r3, [r7, #6]

	  if(newStateMotor != OldStateMotor)
 800269e:	79ba      	ldrb	r2, [r7, #6]
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d0ed      	beq.n	8002682 <main+0x42>
	  {
		  printf_fms_state_and_sensor();
 80026a6:	f7ff ff9d 	bl	80025e4 <printf_fms_state_and_sensor>

	  	  switch(newStateMotor)
 80026aa:	79bb      	ldrb	r3, [r7, #6]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d00c      	beq.n	80026ca <main+0x8a>
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	dc0d      	bgt.n	80026d0 <main+0x90>
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <main+0x7e>
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d003      	beq.n	80026c4 <main+0x84>
	  	  		  break;
	  	  	  case MOTOR_STOP:
	  	  		  set_leds_stop_motor();
	  	  		  break;
	  	  	  default:
	  	  		  break;
 80026bc:	e008      	b.n	80026d0 <main+0x90>
	  	  		  set_leds_down_motor();
 80026be:	f7ff ff4d 	bl	800255c <set_leds_down_motor>
	  	  		  break;
 80026c2:	e006      	b.n	80026d2 <main+0x92>
	  	  		  set_leds_up_motor();
 80026c4:	f7ff ff24 	bl	8002510 <set_leds_up_motor>
	  	  		  break;
 80026c8:	e003      	b.n	80026d2 <main+0x92>
	  	  		  set_leds_stop_motor();
 80026ca:	f7ff ff69 	bl	80025a0 <set_leds_stop_motor>
	  	  		  break;
 80026ce:	e000      	b.n	80026d2 <main+0x92>
	  	  		  break;
 80026d0:	bf00      	nop
	  	  }

	  	  OldStateMotor = newStateMotor;
 80026d2:	79bb      	ldrb	r3, [r7, #6]
 80026d4:	71fb      	strb	r3, [r7, #7]
	  UartReceivedChar(&rcvData);
 80026d6:	e7d4      	b.n	8002682 <main+0x42>
 80026d8:	20000170 	.word	0x20000170
 80026dc:	2000016c 	.word	0x2000016c

080026e0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b094      	sub	sp, #80	; 0x50
 80026e4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	4b2c      	ldr	r3, [pc, #176]	; (800279c <SystemClock_Config+0xbc>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a2b      	ldr	r2, [pc, #172]	; (800279c <SystemClock_Config+0xbc>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b29      	ldr	r3, [pc, #164]	; (800279c <SystemClock_Config+0xbc>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <SystemClock_Config+0xc0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a25      	ldr	r2, [pc, #148]	; (80027a0 <SystemClock_Config+0xc0>)
 800270c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <SystemClock_Config+0xc0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800271e:	2301      	movs	r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002722:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002726:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002728:	2302      	movs	r3, #2
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800272c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002732:	2308      	movs	r3, #8
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002736:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800273c:	2302      	movs	r3, #2
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002740:	2307      	movs	r3, #7
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe feb5 	bl	80014b8 <HAL_RCC_OscConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002754:	f000 f826 	bl	80027a4 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002758:	f7fe fe5e 	bl	8001418 <HAL_PWREx_EnableOverDrive>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8002762:	f000 f81f 	bl	80027a4 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002766:	230f      	movs	r3, #15
 8002768:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800276a:	2302      	movs	r3, #2
 800276c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800276e:	2300      	movs	r3, #0
 8002770:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8002772:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800277e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002782:	2105      	movs	r1, #5
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff f90f 	bl	80019a8 <HAL_RCC_ClockConfig>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8002790:	f000 f808 	bl	80027a4 <Error_Handler>
  }
}
 8002794:	bf00      	nop
 8002796:	3750      	adds	r7, #80	; 0x50
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	40007000 	.word	0x40007000

080027a4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80027a8:	2001      	movs	r0, #1
 80027aa:	f7fe f9f5 	bl	8000b98 <BSP_LED_On>
  while (1)
 80027ae:	e7fe      	b.n	80027ae <Error_Handler+0xa>

080027b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80027b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027b6:	e003      	b.n	80027c0 <LoopCopyDataInit>

080027b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027be:	3104      	adds	r1, #4

080027c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027c0:	480b      	ldr	r0, [pc, #44]	; (80027f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027c8:	d3f6      	bcc.n	80027b8 <CopyDataInit>
  ldr  r2, =_sbss
 80027ca:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027cc:	e002      	b.n	80027d4 <LoopFillZerobss>

080027ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027d0:	f842 3b04 	str.w	r3, [r2], #4

080027d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027d8:	d3f9      	bcc.n	80027ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027da:	f7fe fa11 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027de:	f000 f817 	bl	8002810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027e2:	f7ff ff2d 	bl	8002640 <main>
  bx  lr    
 80027e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80027e8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80027ec:	080032a4 	.word	0x080032a4
  ldr  r0, =_sdata
 80027f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027f4:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80027f8:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80027fc:	200001d4 	.word	0x200001d4

08002800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002800:	e7fe      	b.n	8002800 <ADC_IRQHandler>
	...

08002804 <__errno>:
 8002804:	4b01      	ldr	r3, [pc, #4]	; (800280c <__errno+0x8>)
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20000018 	.word	0x20000018

08002810 <__libc_init_array>:
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	4d0d      	ldr	r5, [pc, #52]	; (8002848 <__libc_init_array+0x38>)
 8002814:	4c0d      	ldr	r4, [pc, #52]	; (800284c <__libc_init_array+0x3c>)
 8002816:	1b64      	subs	r4, r4, r5
 8002818:	10a4      	asrs	r4, r4, #2
 800281a:	2600      	movs	r6, #0
 800281c:	42a6      	cmp	r6, r4
 800281e:	d109      	bne.n	8002834 <__libc_init_array+0x24>
 8002820:	4d0b      	ldr	r5, [pc, #44]	; (8002850 <__libc_init_array+0x40>)
 8002822:	4c0c      	ldr	r4, [pc, #48]	; (8002854 <__libc_init_array+0x44>)
 8002824:	f000 fc46 	bl	80030b4 <_init>
 8002828:	1b64      	subs	r4, r4, r5
 800282a:	10a4      	asrs	r4, r4, #2
 800282c:	2600      	movs	r6, #0
 800282e:	42a6      	cmp	r6, r4
 8002830:	d105      	bne.n	800283e <__libc_init_array+0x2e>
 8002832:	bd70      	pop	{r4, r5, r6, pc}
 8002834:	f855 3b04 	ldr.w	r3, [r5], #4
 8002838:	4798      	blx	r3
 800283a:	3601      	adds	r6, #1
 800283c:	e7ee      	b.n	800281c <__libc_init_array+0xc>
 800283e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002842:	4798      	blx	r3
 8002844:	3601      	adds	r6, #1
 8002846:	e7f2      	b.n	800282e <__libc_init_array+0x1e>
 8002848:	0800329c 	.word	0x0800329c
 800284c:	0800329c 	.word	0x0800329c
 8002850:	0800329c 	.word	0x0800329c
 8002854:	080032a0 	.word	0x080032a0

08002858 <memcpy>:
 8002858:	440a      	add	r2, r1
 800285a:	4291      	cmp	r1, r2
 800285c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002860:	d100      	bne.n	8002864 <memcpy+0xc>
 8002862:	4770      	bx	lr
 8002864:	b510      	push	{r4, lr}
 8002866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800286a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800286e:	4291      	cmp	r1, r2
 8002870:	d1f9      	bne.n	8002866 <memcpy+0xe>
 8002872:	bd10      	pop	{r4, pc}

08002874 <siprintf>:
 8002874:	b40e      	push	{r1, r2, r3}
 8002876:	b500      	push	{lr}
 8002878:	b09c      	sub	sp, #112	; 0x70
 800287a:	ab1d      	add	r3, sp, #116	; 0x74
 800287c:	9002      	str	r0, [sp, #8]
 800287e:	9006      	str	r0, [sp, #24]
 8002880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002884:	4809      	ldr	r0, [pc, #36]	; (80028ac <siprintf+0x38>)
 8002886:	9107      	str	r1, [sp, #28]
 8002888:	9104      	str	r1, [sp, #16]
 800288a:	4909      	ldr	r1, [pc, #36]	; (80028b0 <siprintf+0x3c>)
 800288c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002890:	9105      	str	r1, [sp, #20]
 8002892:	6800      	ldr	r0, [r0, #0]
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	a902      	add	r1, sp, #8
 8002898:	f000 f868 	bl	800296c <_svfiprintf_r>
 800289c:	9b02      	ldr	r3, [sp, #8]
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	b01c      	add	sp, #112	; 0x70
 80028a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80028a8:	b003      	add	sp, #12
 80028aa:	4770      	bx	lr
 80028ac:	20000018 	.word	0x20000018
 80028b0:	ffff0208 	.word	0xffff0208

080028b4 <__ssputs_r>:
 80028b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b8:	688e      	ldr	r6, [r1, #8]
 80028ba:	429e      	cmp	r6, r3
 80028bc:	4682      	mov	sl, r0
 80028be:	460c      	mov	r4, r1
 80028c0:	4690      	mov	r8, r2
 80028c2:	461f      	mov	r7, r3
 80028c4:	d838      	bhi.n	8002938 <__ssputs_r+0x84>
 80028c6:	898a      	ldrh	r2, [r1, #12]
 80028c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80028cc:	d032      	beq.n	8002934 <__ssputs_r+0x80>
 80028ce:	6825      	ldr	r5, [r4, #0]
 80028d0:	6909      	ldr	r1, [r1, #16]
 80028d2:	eba5 0901 	sub.w	r9, r5, r1
 80028d6:	6965      	ldr	r5, [r4, #20]
 80028d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80028e0:	3301      	adds	r3, #1
 80028e2:	444b      	add	r3, r9
 80028e4:	106d      	asrs	r5, r5, #1
 80028e6:	429d      	cmp	r5, r3
 80028e8:	bf38      	it	cc
 80028ea:	461d      	movcc	r5, r3
 80028ec:	0553      	lsls	r3, r2, #21
 80028ee:	d531      	bpl.n	8002954 <__ssputs_r+0xa0>
 80028f0:	4629      	mov	r1, r5
 80028f2:	f000 fb39 	bl	8002f68 <_malloc_r>
 80028f6:	4606      	mov	r6, r0
 80028f8:	b950      	cbnz	r0, 8002910 <__ssputs_r+0x5c>
 80028fa:	230c      	movs	r3, #12
 80028fc:	f8ca 3000 	str.w	r3, [sl]
 8002900:	89a3      	ldrh	r3, [r4, #12]
 8002902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002906:	81a3      	strh	r3, [r4, #12]
 8002908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800290c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002910:	6921      	ldr	r1, [r4, #16]
 8002912:	464a      	mov	r2, r9
 8002914:	f7ff ffa0 	bl	8002858 <memcpy>
 8002918:	89a3      	ldrh	r3, [r4, #12]
 800291a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800291e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002922:	81a3      	strh	r3, [r4, #12]
 8002924:	6126      	str	r6, [r4, #16]
 8002926:	6165      	str	r5, [r4, #20]
 8002928:	444e      	add	r6, r9
 800292a:	eba5 0509 	sub.w	r5, r5, r9
 800292e:	6026      	str	r6, [r4, #0]
 8002930:	60a5      	str	r5, [r4, #8]
 8002932:	463e      	mov	r6, r7
 8002934:	42be      	cmp	r6, r7
 8002936:	d900      	bls.n	800293a <__ssputs_r+0x86>
 8002938:	463e      	mov	r6, r7
 800293a:	4632      	mov	r2, r6
 800293c:	6820      	ldr	r0, [r4, #0]
 800293e:	4641      	mov	r1, r8
 8002940:	f000 faa8 	bl	8002e94 <memmove>
 8002944:	68a3      	ldr	r3, [r4, #8]
 8002946:	6822      	ldr	r2, [r4, #0]
 8002948:	1b9b      	subs	r3, r3, r6
 800294a:	4432      	add	r2, r6
 800294c:	60a3      	str	r3, [r4, #8]
 800294e:	6022      	str	r2, [r4, #0]
 8002950:	2000      	movs	r0, #0
 8002952:	e7db      	b.n	800290c <__ssputs_r+0x58>
 8002954:	462a      	mov	r2, r5
 8002956:	f000 fb61 	bl	800301c <_realloc_r>
 800295a:	4606      	mov	r6, r0
 800295c:	2800      	cmp	r0, #0
 800295e:	d1e1      	bne.n	8002924 <__ssputs_r+0x70>
 8002960:	6921      	ldr	r1, [r4, #16]
 8002962:	4650      	mov	r0, sl
 8002964:	f000 fab0 	bl	8002ec8 <_free_r>
 8002968:	e7c7      	b.n	80028fa <__ssputs_r+0x46>
	...

0800296c <_svfiprintf_r>:
 800296c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002970:	4698      	mov	r8, r3
 8002972:	898b      	ldrh	r3, [r1, #12]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	b09d      	sub	sp, #116	; 0x74
 8002978:	4607      	mov	r7, r0
 800297a:	460d      	mov	r5, r1
 800297c:	4614      	mov	r4, r2
 800297e:	d50e      	bpl.n	800299e <_svfiprintf_r+0x32>
 8002980:	690b      	ldr	r3, [r1, #16]
 8002982:	b963      	cbnz	r3, 800299e <_svfiprintf_r+0x32>
 8002984:	2140      	movs	r1, #64	; 0x40
 8002986:	f000 faef 	bl	8002f68 <_malloc_r>
 800298a:	6028      	str	r0, [r5, #0]
 800298c:	6128      	str	r0, [r5, #16]
 800298e:	b920      	cbnz	r0, 800299a <_svfiprintf_r+0x2e>
 8002990:	230c      	movs	r3, #12
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002998:	e0d1      	b.n	8002b3e <_svfiprintf_r+0x1d2>
 800299a:	2340      	movs	r3, #64	; 0x40
 800299c:	616b      	str	r3, [r5, #20]
 800299e:	2300      	movs	r3, #0
 80029a0:	9309      	str	r3, [sp, #36]	; 0x24
 80029a2:	2320      	movs	r3, #32
 80029a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80029ac:	2330      	movs	r3, #48	; 0x30
 80029ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002b58 <_svfiprintf_r+0x1ec>
 80029b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029b6:	f04f 0901 	mov.w	r9, #1
 80029ba:	4623      	mov	r3, r4
 80029bc:	469a      	mov	sl, r3
 80029be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029c2:	b10a      	cbz	r2, 80029c8 <_svfiprintf_r+0x5c>
 80029c4:	2a25      	cmp	r2, #37	; 0x25
 80029c6:	d1f9      	bne.n	80029bc <_svfiprintf_r+0x50>
 80029c8:	ebba 0b04 	subs.w	fp, sl, r4
 80029cc:	d00b      	beq.n	80029e6 <_svfiprintf_r+0x7a>
 80029ce:	465b      	mov	r3, fp
 80029d0:	4622      	mov	r2, r4
 80029d2:	4629      	mov	r1, r5
 80029d4:	4638      	mov	r0, r7
 80029d6:	f7ff ff6d 	bl	80028b4 <__ssputs_r>
 80029da:	3001      	adds	r0, #1
 80029dc:	f000 80aa 	beq.w	8002b34 <_svfiprintf_r+0x1c8>
 80029e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029e2:	445a      	add	r2, fp
 80029e4:	9209      	str	r2, [sp, #36]	; 0x24
 80029e6:	f89a 3000 	ldrb.w	r3, [sl]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80a2 	beq.w	8002b34 <_svfiprintf_r+0x1c8>
 80029f0:	2300      	movs	r3, #0
 80029f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029fa:	f10a 0a01 	add.w	sl, sl, #1
 80029fe:	9304      	str	r3, [sp, #16]
 8002a00:	9307      	str	r3, [sp, #28]
 8002a02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a06:	931a      	str	r3, [sp, #104]	; 0x68
 8002a08:	4654      	mov	r4, sl
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a10:	4851      	ldr	r0, [pc, #324]	; (8002b58 <_svfiprintf_r+0x1ec>)
 8002a12:	f7fd fbf5 	bl	8000200 <memchr>
 8002a16:	9a04      	ldr	r2, [sp, #16]
 8002a18:	b9d8      	cbnz	r0, 8002a52 <_svfiprintf_r+0xe6>
 8002a1a:	06d0      	lsls	r0, r2, #27
 8002a1c:	bf44      	itt	mi
 8002a1e:	2320      	movmi	r3, #32
 8002a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a24:	0711      	lsls	r1, r2, #28
 8002a26:	bf44      	itt	mi
 8002a28:	232b      	movmi	r3, #43	; 0x2b
 8002a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8002a32:	2b2a      	cmp	r3, #42	; 0x2a
 8002a34:	d015      	beq.n	8002a62 <_svfiprintf_r+0xf6>
 8002a36:	9a07      	ldr	r2, [sp, #28]
 8002a38:	4654      	mov	r4, sl
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f04f 0c0a 	mov.w	ip, #10
 8002a40:	4621      	mov	r1, r4
 8002a42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a46:	3b30      	subs	r3, #48	; 0x30
 8002a48:	2b09      	cmp	r3, #9
 8002a4a:	d94e      	bls.n	8002aea <_svfiprintf_r+0x17e>
 8002a4c:	b1b0      	cbz	r0, 8002a7c <_svfiprintf_r+0x110>
 8002a4e:	9207      	str	r2, [sp, #28]
 8002a50:	e014      	b.n	8002a7c <_svfiprintf_r+0x110>
 8002a52:	eba0 0308 	sub.w	r3, r0, r8
 8002a56:	fa09 f303 	lsl.w	r3, r9, r3
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	9304      	str	r3, [sp, #16]
 8002a5e:	46a2      	mov	sl, r4
 8002a60:	e7d2      	b.n	8002a08 <_svfiprintf_r+0x9c>
 8002a62:	9b03      	ldr	r3, [sp, #12]
 8002a64:	1d19      	adds	r1, r3, #4
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	9103      	str	r1, [sp, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bfbb      	ittet	lt
 8002a6e:	425b      	neglt	r3, r3
 8002a70:	f042 0202 	orrlt.w	r2, r2, #2
 8002a74:	9307      	strge	r3, [sp, #28]
 8002a76:	9307      	strlt	r3, [sp, #28]
 8002a78:	bfb8      	it	lt
 8002a7a:	9204      	strlt	r2, [sp, #16]
 8002a7c:	7823      	ldrb	r3, [r4, #0]
 8002a7e:	2b2e      	cmp	r3, #46	; 0x2e
 8002a80:	d10c      	bne.n	8002a9c <_svfiprintf_r+0x130>
 8002a82:	7863      	ldrb	r3, [r4, #1]
 8002a84:	2b2a      	cmp	r3, #42	; 0x2a
 8002a86:	d135      	bne.n	8002af4 <_svfiprintf_r+0x188>
 8002a88:	9b03      	ldr	r3, [sp, #12]
 8002a8a:	1d1a      	adds	r2, r3, #4
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	9203      	str	r2, [sp, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bfb8      	it	lt
 8002a94:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002a98:	3402      	adds	r4, #2
 8002a9a:	9305      	str	r3, [sp, #20]
 8002a9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002b68 <_svfiprintf_r+0x1fc>
 8002aa0:	7821      	ldrb	r1, [r4, #0]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	4650      	mov	r0, sl
 8002aa6:	f7fd fbab 	bl	8000200 <memchr>
 8002aaa:	b140      	cbz	r0, 8002abe <_svfiprintf_r+0x152>
 8002aac:	2340      	movs	r3, #64	; 0x40
 8002aae:	eba0 000a 	sub.w	r0, r0, sl
 8002ab2:	fa03 f000 	lsl.w	r0, r3, r0
 8002ab6:	9b04      	ldr	r3, [sp, #16]
 8002ab8:	4303      	orrs	r3, r0
 8002aba:	3401      	adds	r4, #1
 8002abc:	9304      	str	r3, [sp, #16]
 8002abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ac2:	4826      	ldr	r0, [pc, #152]	; (8002b5c <_svfiprintf_r+0x1f0>)
 8002ac4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ac8:	2206      	movs	r2, #6
 8002aca:	f7fd fb99 	bl	8000200 <memchr>
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	d038      	beq.n	8002b44 <_svfiprintf_r+0x1d8>
 8002ad2:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <_svfiprintf_r+0x1f4>)
 8002ad4:	bb1b      	cbnz	r3, 8002b1e <_svfiprintf_r+0x1b2>
 8002ad6:	9b03      	ldr	r3, [sp, #12]
 8002ad8:	3307      	adds	r3, #7
 8002ada:	f023 0307 	bic.w	r3, r3, #7
 8002ade:	3308      	adds	r3, #8
 8002ae0:	9303      	str	r3, [sp, #12]
 8002ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ae4:	4433      	add	r3, r6
 8002ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ae8:	e767      	b.n	80029ba <_svfiprintf_r+0x4e>
 8002aea:	fb0c 3202 	mla	r2, ip, r2, r3
 8002aee:	460c      	mov	r4, r1
 8002af0:	2001      	movs	r0, #1
 8002af2:	e7a5      	b.n	8002a40 <_svfiprintf_r+0xd4>
 8002af4:	2300      	movs	r3, #0
 8002af6:	3401      	adds	r4, #1
 8002af8:	9305      	str	r3, [sp, #20]
 8002afa:	4619      	mov	r1, r3
 8002afc:	f04f 0c0a 	mov.w	ip, #10
 8002b00:	4620      	mov	r0, r4
 8002b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b06:	3a30      	subs	r2, #48	; 0x30
 8002b08:	2a09      	cmp	r2, #9
 8002b0a:	d903      	bls.n	8002b14 <_svfiprintf_r+0x1a8>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0c5      	beq.n	8002a9c <_svfiprintf_r+0x130>
 8002b10:	9105      	str	r1, [sp, #20]
 8002b12:	e7c3      	b.n	8002a9c <_svfiprintf_r+0x130>
 8002b14:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b18:	4604      	mov	r4, r0
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e7f0      	b.n	8002b00 <_svfiprintf_r+0x194>
 8002b1e:	ab03      	add	r3, sp, #12
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	462a      	mov	r2, r5
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <_svfiprintf_r+0x1f8>)
 8002b26:	a904      	add	r1, sp, #16
 8002b28:	4638      	mov	r0, r7
 8002b2a:	f3af 8000 	nop.w
 8002b2e:	1c42      	adds	r2, r0, #1
 8002b30:	4606      	mov	r6, r0
 8002b32:	d1d6      	bne.n	8002ae2 <_svfiprintf_r+0x176>
 8002b34:	89ab      	ldrh	r3, [r5, #12]
 8002b36:	065b      	lsls	r3, r3, #25
 8002b38:	f53f af2c 	bmi.w	8002994 <_svfiprintf_r+0x28>
 8002b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b3e:	b01d      	add	sp, #116	; 0x74
 8002b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b44:	ab03      	add	r3, sp, #12
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	462a      	mov	r2, r5
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <_svfiprintf_r+0x1f8>)
 8002b4c:	a904      	add	r1, sp, #16
 8002b4e:	4638      	mov	r0, r7
 8002b50:	f000 f87a 	bl	8002c48 <_printf_i>
 8002b54:	e7eb      	b.n	8002b2e <_svfiprintf_r+0x1c2>
 8002b56:	bf00      	nop
 8002b58:	08003260 	.word	0x08003260
 8002b5c:	0800326a 	.word	0x0800326a
 8002b60:	00000000 	.word	0x00000000
 8002b64:	080028b5 	.word	0x080028b5
 8002b68:	08003266 	.word	0x08003266

08002b6c <_printf_common>:
 8002b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b70:	4616      	mov	r6, r2
 8002b72:	4699      	mov	r9, r3
 8002b74:	688a      	ldr	r2, [r1, #8]
 8002b76:	690b      	ldr	r3, [r1, #16]
 8002b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	bfb8      	it	lt
 8002b80:	4613      	movlt	r3, r2
 8002b82:	6033      	str	r3, [r6, #0]
 8002b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b88:	4607      	mov	r7, r0
 8002b8a:	460c      	mov	r4, r1
 8002b8c:	b10a      	cbz	r2, 8002b92 <_printf_common+0x26>
 8002b8e:	3301      	adds	r3, #1
 8002b90:	6033      	str	r3, [r6, #0]
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	0699      	lsls	r1, r3, #26
 8002b96:	bf42      	ittt	mi
 8002b98:	6833      	ldrmi	r3, [r6, #0]
 8002b9a:	3302      	addmi	r3, #2
 8002b9c:	6033      	strmi	r3, [r6, #0]
 8002b9e:	6825      	ldr	r5, [r4, #0]
 8002ba0:	f015 0506 	ands.w	r5, r5, #6
 8002ba4:	d106      	bne.n	8002bb4 <_printf_common+0x48>
 8002ba6:	f104 0a19 	add.w	sl, r4, #25
 8002baa:	68e3      	ldr	r3, [r4, #12]
 8002bac:	6832      	ldr	r2, [r6, #0]
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	42ab      	cmp	r3, r5
 8002bb2:	dc26      	bgt.n	8002c02 <_printf_common+0x96>
 8002bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bb8:	1e13      	subs	r3, r2, #0
 8002bba:	6822      	ldr	r2, [r4, #0]
 8002bbc:	bf18      	it	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	0692      	lsls	r2, r2, #26
 8002bc2:	d42b      	bmi.n	8002c1c <_printf_common+0xb0>
 8002bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bc8:	4649      	mov	r1, r9
 8002bca:	4638      	mov	r0, r7
 8002bcc:	47c0      	blx	r8
 8002bce:	3001      	adds	r0, #1
 8002bd0:	d01e      	beq.n	8002c10 <_printf_common+0xa4>
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	68e5      	ldr	r5, [r4, #12]
 8002bd6:	6832      	ldr	r2, [r6, #0]
 8002bd8:	f003 0306 	and.w	r3, r3, #6
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	bf08      	it	eq
 8002be0:	1aad      	subeq	r5, r5, r2
 8002be2:	68a3      	ldr	r3, [r4, #8]
 8002be4:	6922      	ldr	r2, [r4, #16]
 8002be6:	bf0c      	ite	eq
 8002be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bec:	2500      	movne	r5, #0
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	bfc4      	itt	gt
 8002bf2:	1a9b      	subgt	r3, r3, r2
 8002bf4:	18ed      	addgt	r5, r5, r3
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	341a      	adds	r4, #26
 8002bfa:	42b5      	cmp	r5, r6
 8002bfc:	d11a      	bne.n	8002c34 <_printf_common+0xc8>
 8002bfe:	2000      	movs	r0, #0
 8002c00:	e008      	b.n	8002c14 <_printf_common+0xa8>
 8002c02:	2301      	movs	r3, #1
 8002c04:	4652      	mov	r2, sl
 8002c06:	4649      	mov	r1, r9
 8002c08:	4638      	mov	r0, r7
 8002c0a:	47c0      	blx	r8
 8002c0c:	3001      	adds	r0, #1
 8002c0e:	d103      	bne.n	8002c18 <_printf_common+0xac>
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c18:	3501      	adds	r5, #1
 8002c1a:	e7c6      	b.n	8002baa <_printf_common+0x3e>
 8002c1c:	18e1      	adds	r1, r4, r3
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	2030      	movs	r0, #48	; 0x30
 8002c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c26:	4422      	add	r2, r4
 8002c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c30:	3302      	adds	r3, #2
 8002c32:	e7c7      	b.n	8002bc4 <_printf_common+0x58>
 8002c34:	2301      	movs	r3, #1
 8002c36:	4622      	mov	r2, r4
 8002c38:	4649      	mov	r1, r9
 8002c3a:	4638      	mov	r0, r7
 8002c3c:	47c0      	blx	r8
 8002c3e:	3001      	adds	r0, #1
 8002c40:	d0e6      	beq.n	8002c10 <_printf_common+0xa4>
 8002c42:	3601      	adds	r6, #1
 8002c44:	e7d9      	b.n	8002bfa <_printf_common+0x8e>
	...

08002c48 <_printf_i>:
 8002c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c4c:	460c      	mov	r4, r1
 8002c4e:	4691      	mov	r9, r2
 8002c50:	7e27      	ldrb	r7, [r4, #24]
 8002c52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002c54:	2f78      	cmp	r7, #120	; 0x78
 8002c56:	4680      	mov	r8, r0
 8002c58:	469a      	mov	sl, r3
 8002c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c5e:	d807      	bhi.n	8002c70 <_printf_i+0x28>
 8002c60:	2f62      	cmp	r7, #98	; 0x62
 8002c62:	d80a      	bhi.n	8002c7a <_printf_i+0x32>
 8002c64:	2f00      	cmp	r7, #0
 8002c66:	f000 80d8 	beq.w	8002e1a <_printf_i+0x1d2>
 8002c6a:	2f58      	cmp	r7, #88	; 0x58
 8002c6c:	f000 80a3 	beq.w	8002db6 <_printf_i+0x16e>
 8002c70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c78:	e03a      	b.n	8002cf0 <_printf_i+0xa8>
 8002c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c7e:	2b15      	cmp	r3, #21
 8002c80:	d8f6      	bhi.n	8002c70 <_printf_i+0x28>
 8002c82:	a001      	add	r0, pc, #4	; (adr r0, 8002c88 <_printf_i+0x40>)
 8002c84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002c88:	08002ce1 	.word	0x08002ce1
 8002c8c:	08002cf5 	.word	0x08002cf5
 8002c90:	08002c71 	.word	0x08002c71
 8002c94:	08002c71 	.word	0x08002c71
 8002c98:	08002c71 	.word	0x08002c71
 8002c9c:	08002c71 	.word	0x08002c71
 8002ca0:	08002cf5 	.word	0x08002cf5
 8002ca4:	08002c71 	.word	0x08002c71
 8002ca8:	08002c71 	.word	0x08002c71
 8002cac:	08002c71 	.word	0x08002c71
 8002cb0:	08002c71 	.word	0x08002c71
 8002cb4:	08002e01 	.word	0x08002e01
 8002cb8:	08002d25 	.word	0x08002d25
 8002cbc:	08002de3 	.word	0x08002de3
 8002cc0:	08002c71 	.word	0x08002c71
 8002cc4:	08002c71 	.word	0x08002c71
 8002cc8:	08002e23 	.word	0x08002e23
 8002ccc:	08002c71 	.word	0x08002c71
 8002cd0:	08002d25 	.word	0x08002d25
 8002cd4:	08002c71 	.word	0x08002c71
 8002cd8:	08002c71 	.word	0x08002c71
 8002cdc:	08002deb 	.word	0x08002deb
 8002ce0:	680b      	ldr	r3, [r1, #0]
 8002ce2:	1d1a      	adds	r2, r3, #4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	600a      	str	r2, [r1, #0]
 8002ce8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0a3      	b.n	8002e3c <_printf_i+0x1f4>
 8002cf4:	6825      	ldr	r5, [r4, #0]
 8002cf6:	6808      	ldr	r0, [r1, #0]
 8002cf8:	062e      	lsls	r6, r5, #24
 8002cfa:	f100 0304 	add.w	r3, r0, #4
 8002cfe:	d50a      	bpl.n	8002d16 <_printf_i+0xce>
 8002d00:	6805      	ldr	r5, [r0, #0]
 8002d02:	600b      	str	r3, [r1, #0]
 8002d04:	2d00      	cmp	r5, #0
 8002d06:	da03      	bge.n	8002d10 <_printf_i+0xc8>
 8002d08:	232d      	movs	r3, #45	; 0x2d
 8002d0a:	426d      	negs	r5, r5
 8002d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d10:	485e      	ldr	r0, [pc, #376]	; (8002e8c <_printf_i+0x244>)
 8002d12:	230a      	movs	r3, #10
 8002d14:	e019      	b.n	8002d4a <_printf_i+0x102>
 8002d16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002d1a:	6805      	ldr	r5, [r0, #0]
 8002d1c:	600b      	str	r3, [r1, #0]
 8002d1e:	bf18      	it	ne
 8002d20:	b22d      	sxthne	r5, r5
 8002d22:	e7ef      	b.n	8002d04 <_printf_i+0xbc>
 8002d24:	680b      	ldr	r3, [r1, #0]
 8002d26:	6825      	ldr	r5, [r4, #0]
 8002d28:	1d18      	adds	r0, r3, #4
 8002d2a:	6008      	str	r0, [r1, #0]
 8002d2c:	0628      	lsls	r0, r5, #24
 8002d2e:	d501      	bpl.n	8002d34 <_printf_i+0xec>
 8002d30:	681d      	ldr	r5, [r3, #0]
 8002d32:	e002      	b.n	8002d3a <_printf_i+0xf2>
 8002d34:	0669      	lsls	r1, r5, #25
 8002d36:	d5fb      	bpl.n	8002d30 <_printf_i+0xe8>
 8002d38:	881d      	ldrh	r5, [r3, #0]
 8002d3a:	4854      	ldr	r0, [pc, #336]	; (8002e8c <_printf_i+0x244>)
 8002d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8002d3e:	bf0c      	ite	eq
 8002d40:	2308      	moveq	r3, #8
 8002d42:	230a      	movne	r3, #10
 8002d44:	2100      	movs	r1, #0
 8002d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d4a:	6866      	ldr	r6, [r4, #4]
 8002d4c:	60a6      	str	r6, [r4, #8]
 8002d4e:	2e00      	cmp	r6, #0
 8002d50:	bfa2      	ittt	ge
 8002d52:	6821      	ldrge	r1, [r4, #0]
 8002d54:	f021 0104 	bicge.w	r1, r1, #4
 8002d58:	6021      	strge	r1, [r4, #0]
 8002d5a:	b90d      	cbnz	r5, 8002d60 <_printf_i+0x118>
 8002d5c:	2e00      	cmp	r6, #0
 8002d5e:	d04d      	beq.n	8002dfc <_printf_i+0x1b4>
 8002d60:	4616      	mov	r6, r2
 8002d62:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d66:	fb03 5711 	mls	r7, r3, r1, r5
 8002d6a:	5dc7      	ldrb	r7, [r0, r7]
 8002d6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d70:	462f      	mov	r7, r5
 8002d72:	42bb      	cmp	r3, r7
 8002d74:	460d      	mov	r5, r1
 8002d76:	d9f4      	bls.n	8002d62 <_printf_i+0x11a>
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d10b      	bne.n	8002d94 <_printf_i+0x14c>
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	07df      	lsls	r7, r3, #31
 8002d80:	d508      	bpl.n	8002d94 <_printf_i+0x14c>
 8002d82:	6923      	ldr	r3, [r4, #16]
 8002d84:	6861      	ldr	r1, [r4, #4]
 8002d86:	4299      	cmp	r1, r3
 8002d88:	bfde      	ittt	le
 8002d8a:	2330      	movle	r3, #48	; 0x30
 8002d8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d90:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002d94:	1b92      	subs	r2, r2, r6
 8002d96:	6122      	str	r2, [r4, #16]
 8002d98:	f8cd a000 	str.w	sl, [sp]
 8002d9c:	464b      	mov	r3, r9
 8002d9e:	aa03      	add	r2, sp, #12
 8002da0:	4621      	mov	r1, r4
 8002da2:	4640      	mov	r0, r8
 8002da4:	f7ff fee2 	bl	8002b6c <_printf_common>
 8002da8:	3001      	adds	r0, #1
 8002daa:	d14c      	bne.n	8002e46 <_printf_i+0x1fe>
 8002dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002db0:	b004      	add	sp, #16
 8002db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002db6:	4835      	ldr	r0, [pc, #212]	; (8002e8c <_printf_i+0x244>)
 8002db8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	680e      	ldr	r6, [r1, #0]
 8002dc0:	061f      	lsls	r7, r3, #24
 8002dc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8002dc6:	600e      	str	r6, [r1, #0]
 8002dc8:	d514      	bpl.n	8002df4 <_printf_i+0x1ac>
 8002dca:	07d9      	lsls	r1, r3, #31
 8002dcc:	bf44      	itt	mi
 8002dce:	f043 0320 	orrmi.w	r3, r3, #32
 8002dd2:	6023      	strmi	r3, [r4, #0]
 8002dd4:	b91d      	cbnz	r5, 8002dde <_printf_i+0x196>
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	f023 0320 	bic.w	r3, r3, #32
 8002ddc:	6023      	str	r3, [r4, #0]
 8002dde:	2310      	movs	r3, #16
 8002de0:	e7b0      	b.n	8002d44 <_printf_i+0xfc>
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	f043 0320 	orr.w	r3, r3, #32
 8002de8:	6023      	str	r3, [r4, #0]
 8002dea:	2378      	movs	r3, #120	; 0x78
 8002dec:	4828      	ldr	r0, [pc, #160]	; (8002e90 <_printf_i+0x248>)
 8002dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002df2:	e7e3      	b.n	8002dbc <_printf_i+0x174>
 8002df4:	065e      	lsls	r6, r3, #25
 8002df6:	bf48      	it	mi
 8002df8:	b2ad      	uxthmi	r5, r5
 8002dfa:	e7e6      	b.n	8002dca <_printf_i+0x182>
 8002dfc:	4616      	mov	r6, r2
 8002dfe:	e7bb      	b.n	8002d78 <_printf_i+0x130>
 8002e00:	680b      	ldr	r3, [r1, #0]
 8002e02:	6826      	ldr	r6, [r4, #0]
 8002e04:	6960      	ldr	r0, [r4, #20]
 8002e06:	1d1d      	adds	r5, r3, #4
 8002e08:	600d      	str	r5, [r1, #0]
 8002e0a:	0635      	lsls	r5, r6, #24
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	d501      	bpl.n	8002e14 <_printf_i+0x1cc>
 8002e10:	6018      	str	r0, [r3, #0]
 8002e12:	e002      	b.n	8002e1a <_printf_i+0x1d2>
 8002e14:	0671      	lsls	r1, r6, #25
 8002e16:	d5fb      	bpl.n	8002e10 <_printf_i+0x1c8>
 8002e18:	8018      	strh	r0, [r3, #0]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	6123      	str	r3, [r4, #16]
 8002e1e:	4616      	mov	r6, r2
 8002e20:	e7ba      	b.n	8002d98 <_printf_i+0x150>
 8002e22:	680b      	ldr	r3, [r1, #0]
 8002e24:	1d1a      	adds	r2, r3, #4
 8002e26:	600a      	str	r2, [r1, #0]
 8002e28:	681e      	ldr	r6, [r3, #0]
 8002e2a:	6862      	ldr	r2, [r4, #4]
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4630      	mov	r0, r6
 8002e30:	f7fd f9e6 	bl	8000200 <memchr>
 8002e34:	b108      	cbz	r0, 8002e3a <_printf_i+0x1f2>
 8002e36:	1b80      	subs	r0, r0, r6
 8002e38:	6060      	str	r0, [r4, #4]
 8002e3a:	6863      	ldr	r3, [r4, #4]
 8002e3c:	6123      	str	r3, [r4, #16]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e44:	e7a8      	b.n	8002d98 <_printf_i+0x150>
 8002e46:	6923      	ldr	r3, [r4, #16]
 8002e48:	4632      	mov	r2, r6
 8002e4a:	4649      	mov	r1, r9
 8002e4c:	4640      	mov	r0, r8
 8002e4e:	47d0      	blx	sl
 8002e50:	3001      	adds	r0, #1
 8002e52:	d0ab      	beq.n	8002dac <_printf_i+0x164>
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	079b      	lsls	r3, r3, #30
 8002e58:	d413      	bmi.n	8002e82 <_printf_i+0x23a>
 8002e5a:	68e0      	ldr	r0, [r4, #12]
 8002e5c:	9b03      	ldr	r3, [sp, #12]
 8002e5e:	4298      	cmp	r0, r3
 8002e60:	bfb8      	it	lt
 8002e62:	4618      	movlt	r0, r3
 8002e64:	e7a4      	b.n	8002db0 <_printf_i+0x168>
 8002e66:	2301      	movs	r3, #1
 8002e68:	4632      	mov	r2, r6
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	4640      	mov	r0, r8
 8002e6e:	47d0      	blx	sl
 8002e70:	3001      	adds	r0, #1
 8002e72:	d09b      	beq.n	8002dac <_printf_i+0x164>
 8002e74:	3501      	adds	r5, #1
 8002e76:	68e3      	ldr	r3, [r4, #12]
 8002e78:	9903      	ldr	r1, [sp, #12]
 8002e7a:	1a5b      	subs	r3, r3, r1
 8002e7c:	42ab      	cmp	r3, r5
 8002e7e:	dcf2      	bgt.n	8002e66 <_printf_i+0x21e>
 8002e80:	e7eb      	b.n	8002e5a <_printf_i+0x212>
 8002e82:	2500      	movs	r5, #0
 8002e84:	f104 0619 	add.w	r6, r4, #25
 8002e88:	e7f5      	b.n	8002e76 <_printf_i+0x22e>
 8002e8a:	bf00      	nop
 8002e8c:	08003271 	.word	0x08003271
 8002e90:	08003282 	.word	0x08003282

08002e94 <memmove>:
 8002e94:	4288      	cmp	r0, r1
 8002e96:	b510      	push	{r4, lr}
 8002e98:	eb01 0402 	add.w	r4, r1, r2
 8002e9c:	d902      	bls.n	8002ea4 <memmove+0x10>
 8002e9e:	4284      	cmp	r4, r0
 8002ea0:	4623      	mov	r3, r4
 8002ea2:	d807      	bhi.n	8002eb4 <memmove+0x20>
 8002ea4:	1e43      	subs	r3, r0, #1
 8002ea6:	42a1      	cmp	r1, r4
 8002ea8:	d008      	beq.n	8002ebc <memmove+0x28>
 8002eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002eae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002eb2:	e7f8      	b.n	8002ea6 <memmove+0x12>
 8002eb4:	4402      	add	r2, r0
 8002eb6:	4601      	mov	r1, r0
 8002eb8:	428a      	cmp	r2, r1
 8002eba:	d100      	bne.n	8002ebe <memmove+0x2a>
 8002ebc:	bd10      	pop	{r4, pc}
 8002ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ec6:	e7f7      	b.n	8002eb8 <memmove+0x24>

08002ec8 <_free_r>:
 8002ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002eca:	2900      	cmp	r1, #0
 8002ecc:	d048      	beq.n	8002f60 <_free_r+0x98>
 8002ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ed2:	9001      	str	r0, [sp, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f1a1 0404 	sub.w	r4, r1, #4
 8002eda:	bfb8      	it	lt
 8002edc:	18e4      	addlt	r4, r4, r3
 8002ede:	f000 f8d3 	bl	8003088 <__malloc_lock>
 8002ee2:	4a20      	ldr	r2, [pc, #128]	; (8002f64 <_free_r+0x9c>)
 8002ee4:	9801      	ldr	r0, [sp, #4]
 8002ee6:	6813      	ldr	r3, [r2, #0]
 8002ee8:	4615      	mov	r5, r2
 8002eea:	b933      	cbnz	r3, 8002efa <_free_r+0x32>
 8002eec:	6063      	str	r3, [r4, #4]
 8002eee:	6014      	str	r4, [r2, #0]
 8002ef0:	b003      	add	sp, #12
 8002ef2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ef6:	f000 b8cd 	b.w	8003094 <__malloc_unlock>
 8002efa:	42a3      	cmp	r3, r4
 8002efc:	d90b      	bls.n	8002f16 <_free_r+0x4e>
 8002efe:	6821      	ldr	r1, [r4, #0]
 8002f00:	1862      	adds	r2, r4, r1
 8002f02:	4293      	cmp	r3, r2
 8002f04:	bf04      	itt	eq
 8002f06:	681a      	ldreq	r2, [r3, #0]
 8002f08:	685b      	ldreq	r3, [r3, #4]
 8002f0a:	6063      	str	r3, [r4, #4]
 8002f0c:	bf04      	itt	eq
 8002f0e:	1852      	addeq	r2, r2, r1
 8002f10:	6022      	streq	r2, [r4, #0]
 8002f12:	602c      	str	r4, [r5, #0]
 8002f14:	e7ec      	b.n	8002ef0 <_free_r+0x28>
 8002f16:	461a      	mov	r2, r3
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	b10b      	cbz	r3, 8002f20 <_free_r+0x58>
 8002f1c:	42a3      	cmp	r3, r4
 8002f1e:	d9fa      	bls.n	8002f16 <_free_r+0x4e>
 8002f20:	6811      	ldr	r1, [r2, #0]
 8002f22:	1855      	adds	r5, r2, r1
 8002f24:	42a5      	cmp	r5, r4
 8002f26:	d10b      	bne.n	8002f40 <_free_r+0x78>
 8002f28:	6824      	ldr	r4, [r4, #0]
 8002f2a:	4421      	add	r1, r4
 8002f2c:	1854      	adds	r4, r2, r1
 8002f2e:	42a3      	cmp	r3, r4
 8002f30:	6011      	str	r1, [r2, #0]
 8002f32:	d1dd      	bne.n	8002ef0 <_free_r+0x28>
 8002f34:	681c      	ldr	r4, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	6053      	str	r3, [r2, #4]
 8002f3a:	4421      	add	r1, r4
 8002f3c:	6011      	str	r1, [r2, #0]
 8002f3e:	e7d7      	b.n	8002ef0 <_free_r+0x28>
 8002f40:	d902      	bls.n	8002f48 <_free_r+0x80>
 8002f42:	230c      	movs	r3, #12
 8002f44:	6003      	str	r3, [r0, #0]
 8002f46:	e7d3      	b.n	8002ef0 <_free_r+0x28>
 8002f48:	6825      	ldr	r5, [r4, #0]
 8002f4a:	1961      	adds	r1, r4, r5
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	bf04      	itt	eq
 8002f50:	6819      	ldreq	r1, [r3, #0]
 8002f52:	685b      	ldreq	r3, [r3, #4]
 8002f54:	6063      	str	r3, [r4, #4]
 8002f56:	bf04      	itt	eq
 8002f58:	1949      	addeq	r1, r1, r5
 8002f5a:	6021      	streq	r1, [r4, #0]
 8002f5c:	6054      	str	r4, [r2, #4]
 8002f5e:	e7c7      	b.n	8002ef0 <_free_r+0x28>
 8002f60:	b003      	add	sp, #12
 8002f62:	bd30      	pop	{r4, r5, pc}
 8002f64:	20000174 	.word	0x20000174

08002f68 <_malloc_r>:
 8002f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6a:	1ccd      	adds	r5, r1, #3
 8002f6c:	f025 0503 	bic.w	r5, r5, #3
 8002f70:	3508      	adds	r5, #8
 8002f72:	2d0c      	cmp	r5, #12
 8002f74:	bf38      	it	cc
 8002f76:	250c      	movcc	r5, #12
 8002f78:	2d00      	cmp	r5, #0
 8002f7a:	4606      	mov	r6, r0
 8002f7c:	db01      	blt.n	8002f82 <_malloc_r+0x1a>
 8002f7e:	42a9      	cmp	r1, r5
 8002f80:	d903      	bls.n	8002f8a <_malloc_r+0x22>
 8002f82:	230c      	movs	r3, #12
 8002f84:	6033      	str	r3, [r6, #0]
 8002f86:	2000      	movs	r0, #0
 8002f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f8a:	f000 f87d 	bl	8003088 <__malloc_lock>
 8002f8e:	4921      	ldr	r1, [pc, #132]	; (8003014 <_malloc_r+0xac>)
 8002f90:	680a      	ldr	r2, [r1, #0]
 8002f92:	4614      	mov	r4, r2
 8002f94:	b99c      	cbnz	r4, 8002fbe <_malloc_r+0x56>
 8002f96:	4f20      	ldr	r7, [pc, #128]	; (8003018 <_malloc_r+0xb0>)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b923      	cbnz	r3, 8002fa6 <_malloc_r+0x3e>
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	f000 f862 	bl	8003068 <_sbrk_r>
 8002fa4:	6038      	str	r0, [r7, #0]
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	4630      	mov	r0, r6
 8002faa:	f000 f85d 	bl	8003068 <_sbrk_r>
 8002fae:	1c43      	adds	r3, r0, #1
 8002fb0:	d123      	bne.n	8002ffa <_malloc_r+0x92>
 8002fb2:	230c      	movs	r3, #12
 8002fb4:	6033      	str	r3, [r6, #0]
 8002fb6:	4630      	mov	r0, r6
 8002fb8:	f000 f86c 	bl	8003094 <__malloc_unlock>
 8002fbc:	e7e3      	b.n	8002f86 <_malloc_r+0x1e>
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	1b5b      	subs	r3, r3, r5
 8002fc2:	d417      	bmi.n	8002ff4 <_malloc_r+0x8c>
 8002fc4:	2b0b      	cmp	r3, #11
 8002fc6:	d903      	bls.n	8002fd0 <_malloc_r+0x68>
 8002fc8:	6023      	str	r3, [r4, #0]
 8002fca:	441c      	add	r4, r3
 8002fcc:	6025      	str	r5, [r4, #0]
 8002fce:	e004      	b.n	8002fda <_malloc_r+0x72>
 8002fd0:	6863      	ldr	r3, [r4, #4]
 8002fd2:	42a2      	cmp	r2, r4
 8002fd4:	bf0c      	ite	eq
 8002fd6:	600b      	streq	r3, [r1, #0]
 8002fd8:	6053      	strne	r3, [r2, #4]
 8002fda:	4630      	mov	r0, r6
 8002fdc:	f000 f85a 	bl	8003094 <__malloc_unlock>
 8002fe0:	f104 000b 	add.w	r0, r4, #11
 8002fe4:	1d23      	adds	r3, r4, #4
 8002fe6:	f020 0007 	bic.w	r0, r0, #7
 8002fea:	1ac2      	subs	r2, r0, r3
 8002fec:	d0cc      	beq.n	8002f88 <_malloc_r+0x20>
 8002fee:	1a1b      	subs	r3, r3, r0
 8002ff0:	50a3      	str	r3, [r4, r2]
 8002ff2:	e7c9      	b.n	8002f88 <_malloc_r+0x20>
 8002ff4:	4622      	mov	r2, r4
 8002ff6:	6864      	ldr	r4, [r4, #4]
 8002ff8:	e7cc      	b.n	8002f94 <_malloc_r+0x2c>
 8002ffa:	1cc4      	adds	r4, r0, #3
 8002ffc:	f024 0403 	bic.w	r4, r4, #3
 8003000:	42a0      	cmp	r0, r4
 8003002:	d0e3      	beq.n	8002fcc <_malloc_r+0x64>
 8003004:	1a21      	subs	r1, r4, r0
 8003006:	4630      	mov	r0, r6
 8003008:	f000 f82e 	bl	8003068 <_sbrk_r>
 800300c:	3001      	adds	r0, #1
 800300e:	d1dd      	bne.n	8002fcc <_malloc_r+0x64>
 8003010:	e7cf      	b.n	8002fb2 <_malloc_r+0x4a>
 8003012:	bf00      	nop
 8003014:	20000174 	.word	0x20000174
 8003018:	20000178 	.word	0x20000178

0800301c <_realloc_r>:
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	4607      	mov	r7, r0
 8003020:	4614      	mov	r4, r2
 8003022:	460e      	mov	r6, r1
 8003024:	b921      	cbnz	r1, 8003030 <_realloc_r+0x14>
 8003026:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800302a:	4611      	mov	r1, r2
 800302c:	f7ff bf9c 	b.w	8002f68 <_malloc_r>
 8003030:	b922      	cbnz	r2, 800303c <_realloc_r+0x20>
 8003032:	f7ff ff49 	bl	8002ec8 <_free_r>
 8003036:	4625      	mov	r5, r4
 8003038:	4628      	mov	r0, r5
 800303a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800303c:	f000 f830 	bl	80030a0 <_malloc_usable_size_r>
 8003040:	42a0      	cmp	r0, r4
 8003042:	d20f      	bcs.n	8003064 <_realloc_r+0x48>
 8003044:	4621      	mov	r1, r4
 8003046:	4638      	mov	r0, r7
 8003048:	f7ff ff8e 	bl	8002f68 <_malloc_r>
 800304c:	4605      	mov	r5, r0
 800304e:	2800      	cmp	r0, #0
 8003050:	d0f2      	beq.n	8003038 <_realloc_r+0x1c>
 8003052:	4631      	mov	r1, r6
 8003054:	4622      	mov	r2, r4
 8003056:	f7ff fbff 	bl	8002858 <memcpy>
 800305a:	4631      	mov	r1, r6
 800305c:	4638      	mov	r0, r7
 800305e:	f7ff ff33 	bl	8002ec8 <_free_r>
 8003062:	e7e9      	b.n	8003038 <_realloc_r+0x1c>
 8003064:	4635      	mov	r5, r6
 8003066:	e7e7      	b.n	8003038 <_realloc_r+0x1c>

08003068 <_sbrk_r>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4d06      	ldr	r5, [pc, #24]	; (8003084 <_sbrk_r+0x1c>)
 800306c:	2300      	movs	r3, #0
 800306e:	4604      	mov	r4, r0
 8003070:	4608      	mov	r0, r1
 8003072:	602b      	str	r3, [r5, #0]
 8003074:	f7fd fe28 	bl	8000cc8 <_sbrk>
 8003078:	1c43      	adds	r3, r0, #1
 800307a:	d102      	bne.n	8003082 <_sbrk_r+0x1a>
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	b103      	cbz	r3, 8003082 <_sbrk_r+0x1a>
 8003080:	6023      	str	r3, [r4, #0]
 8003082:	bd38      	pop	{r3, r4, r5, pc}
 8003084:	200001c4 	.word	0x200001c4

08003088 <__malloc_lock>:
 8003088:	4801      	ldr	r0, [pc, #4]	; (8003090 <__malloc_lock+0x8>)
 800308a:	f000 b811 	b.w	80030b0 <__retarget_lock_acquire_recursive>
 800308e:	bf00      	nop
 8003090:	200001cc 	.word	0x200001cc

08003094 <__malloc_unlock>:
 8003094:	4801      	ldr	r0, [pc, #4]	; (800309c <__malloc_unlock+0x8>)
 8003096:	f000 b80c 	b.w	80030b2 <__retarget_lock_release_recursive>
 800309a:	bf00      	nop
 800309c:	200001cc 	.word	0x200001cc

080030a0 <_malloc_usable_size_r>:
 80030a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030a4:	1f18      	subs	r0, r3, #4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bfbc      	itt	lt
 80030aa:	580b      	ldrlt	r3, [r1, r0]
 80030ac:	18c0      	addlt	r0, r0, r3
 80030ae:	4770      	bx	lr

080030b0 <__retarget_lock_acquire_recursive>:
 80030b0:	4770      	bx	lr

080030b2 <__retarget_lock_release_recursive>:
 80030b2:	4770      	bx	lr

080030b4 <_init>:
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b6:	bf00      	nop
 80030b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ba:	bc08      	pop	{r3}
 80030bc:	469e      	mov	lr, r3
 80030be:	4770      	bx	lr

080030c0 <_fini>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr
